{"ast":null,"code":"import { Map, Geolocation } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport Select from 'ol/interaction/Select';\nimport XYZSource from 'ol/source/XYZ';\nimport { baseLayerUrl, geoserverWfsUrl, view, trackFeature } from './MapConfig';\nimport { selectedStyle, defaultStyle } from './MapStyles';\nexport class MapUtils {\n  static createBaseLayer() {\n    const xyzURL = baseLayerUrl;\n    const baseSource = new XYZSource({\n      url: xyzURL\n    });\n    const baseLayer = new TileLayer({\n      source: baseSource\n    });\n    return baseLayer;\n  }\n\n  static createMap() {\n    const baseLayer = this.createBaseLayer();\n    const map = new Map({\n      target: 'map',\n      layers: [baseLayer],\n      view: view\n    });\n    return map;\n  } //creates a vector source based on a publised geoserver layer\n\n\n  static createSource(typename) {\n    const source = new VectorSource({\n      format: new GeoJSON(),\n      url: function (extent) {\n        return `${geoserverWfsUrl}\n                &request=GetFeature&typename=${typename}\n                &outputFormat=application/json\n                &srsname=EPSG:3857&bbox=${extent.join(',')},EPSG:3857`;\n      },\n      strategy: bboxStrategy\n    });\n    return source;\n  } //creates a vector layer based on a vector source from a published geoserver layer\n\n\n  static createVector(typename) {\n    const vectorSource = this.createSource(typename);\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      extent: vectorSource.getExtent(),\n      style: defaultStyle\n    });\n    vectorLayer.setMinZoom(16);\n    return vectorLayer;\n  } //creates select interaction\n\n\n  static createSelect() {\n    const select = new Select({\n      style: selectedStyle\n    });\n    return select;\n  }\n\n  static createGeolocation(map) {\n    const geolocation = new Geolocation({\n      tracking: true,\n      projection: 'EPSG:3857'\n    });\n    trackFeature.setGeometryName('geom');\n    geolocation.on('change', function () {\n      let coordinate = geolocation.getPosition();\n      let track = trackFeature.getGeometry();\n      track.setCoordinates(coordinate);\n      let center = track.getFirstCoordinate();\n      view.animate({\n        center: center,\n        duration: 3000,\n        zoom: 18\n      });\n    });\n    let trackLayer = new VectorLayer({\n      source: new VectorSource({\n        features: [trackFeature]\n      })\n    });\n    map.addLayer(trackLayer);\n    alert('Tracking started. If your position changes, map will zoom to your current location.');\n    return geolocation;\n  }\n\n  static removeLastLayer(map) {\n    const layers = map.getLayers().getArray();\n    const layer = layers[layers.length - 1];\n    layer.getSource().clear();\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/app/src/utils/MapUtils.tsx"],"names":["Map","Geolocation","TileLayer","VectorSource","GeoJSON","bbox","bboxStrategy","VectorLayer","Select","XYZSource","baseLayerUrl","geoserverWfsUrl","view","trackFeature","selectedStyle","defaultStyle","MapUtils","createBaseLayer","xyzURL","baseSource","url","baseLayer","source","createMap","map","target","layers","createSource","typename","format","extent","join","strategy","createVector","vectorSource","vectorLayer","getExtent","style","setMinZoom","createSelect","select","createGeolocation","geolocation","tracking","projection","setGeometryName","on","coordinate","getPosition","track","getGeometry","setCoordinates","center","getFirstCoordinate","animate","duration","zoom","trackLayer","features","addLayer","alert","removeLastLayer","getLayers","getArray","layer","length","getSource","clear"],"mappings":"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","sourcesContent":["\r\nimport { Map, Geolocation } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Select from 'ol/interaction/Select';\r\nimport XYZSource from 'ol/source/XYZ';\r\nimport { baseLayerUrl, geoserverWfsUrl, view, trackFeature } from './MapConfig';\r\nimport { selectedStyle, defaultStyle } from './MapStyles';\r\nimport Point from 'ol/geom/Point';\r\n\r\nexport class MapUtils {\r\n    static createBaseLayer() {\r\n        const xyzURL: string = baseLayerUrl;\r\n        const baseSource: XYZSource = new XYZSource({\r\n            url: xyzURL\r\n        });\r\n        const baseLayer: TileLayer = new TileLayer({\r\n            source: baseSource\r\n        });\r\n\r\n        return baseLayer;\r\n    }\r\n\r\n    static createMap() {\r\n        const baseLayer: TileLayer = this.createBaseLayer();\r\n        const map: Map = new Map({\r\n            target: 'map',\r\n            layers: [baseLayer],\r\n            view: view\r\n        });\r\n        return map;\r\n    }\r\n    //creates a vector source based on a publised geoserver layer\r\n    static createSource(typename: string) {\r\n        const source: VectorSource = new VectorSource({\r\n            format: new GeoJSON(),\r\n            url: function (extent: number[]) {\r\n                return `${geoserverWfsUrl}\r\n                &request=GetFeature&typename=${typename}\r\n                &outputFormat=application/json\r\n                &srsname=EPSG:3857&bbox=${extent.join(',')},EPSG:3857`;\r\n            },\r\n            strategy: bboxStrategy,\r\n        });\r\n        return source;\r\n    }\r\n    //creates a vector layer based on a vector source from a published geoserver layer\r\n    static createVector(typename: string) {\r\n        const vectorSource: VectorSource = this.createSource(typename);\r\n        const vectorLayer: VectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            extent: vectorSource.getExtent(),\r\n            style: defaultStyle,\r\n        });\r\n        vectorLayer.setMinZoom(16)\r\n        return vectorLayer;\r\n    }\r\n    //creates select interaction\r\n    static createSelect(): Select {\r\n        const select: Select = new Select({\r\n            style: selectedStyle\r\n        });\r\n        return select;\r\n    }\r\n\r\n    static createGeolocation(map: Map | null): Geolocation {\r\n        const geolocation = new Geolocation({\r\n            tracking: true,\r\n            projection: 'EPSG:3857',\r\n        });\r\n        trackFeature.setGeometryName('geom');\r\n        geolocation.on('change', function () {\r\n            let coordinate: number[] = geolocation.getPosition();\r\n            let track: Point = trackFeature.getGeometry() as Point;\r\n            track.setCoordinates(coordinate);\r\n            let center =  track.getFirstCoordinate()\r\n            view.animate({\r\n                center: center,\r\n                duration: 3000,\r\n                zoom:18\r\n            });\r\n        });\r\n        let trackLayer = new VectorLayer({\r\n            source: new VectorSource({\r\n                features: [trackFeature]\r\n            }),\r\n        });\r\n        map!.addLayer(trackLayer);\r\n        alert('Tracking started. If your position changes, map will zoom to your current location.')\r\n        return geolocation;\r\n    }\r\n\r\n    static removeLastLayer(map: Map | null) {\r\n        const layers = map!.getLayers().getArray();\r\n        const layer = layers[layers.length - 1] as VectorLayer;\r\n        layer.getSource().clear();\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}