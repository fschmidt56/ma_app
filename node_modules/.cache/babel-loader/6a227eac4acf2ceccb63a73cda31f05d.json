{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4_Semester\\\\MA\\\\WebGIS\\\\app\\\\src\\\\components\\\\Instructions.tsx\";\nimport React, { useState } from 'react';\nimport Button from './Button';\nimport { usedIcons } from '../utils/MapConfig';\n\nconst Instructions = props => {\n  const [open, setOpen] = useState([false, true]);\n  return React.createElement(React.Fragment, null, React.createElement(\"div\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 13\n    },\n    __self: this\n  }, React.createElement(Button, {\n    buttonText: `Besuchte Orte markieren `,\n    faIcon: open[0] ? usedIcons[8] : usedIcons[7],\n    clickButton: () => setOpen([!open[0], open[1]]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 14\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: open[0] ? 'notCollapsedInst' : 'collapsedInst',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 19\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 20\n    },\n    __self: this\n  }, \"Zoome in die Karte hinein. Es erscheinen Hausumringe von allen Geb\\xE4uden im Stadtgebiet.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 21\n    },\n    __self: this\n  }, \"Wenn du an Corona erkrankt bist/warst, kannst du per Klick ein Geb\\xE4ude selektieren in dem du dich kurz vor deiner Diagnose aufgehalten hast.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }, \"W\\xE4hle dann \", React.createElement(\"i\", {\n    className: usedIcons[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 22\n    },\n    __self: this\n  }), \" vom Men\\xFC links. \\xDCber den dortigen Button kannst du den Status des gew\\xE4hlten Geb\\xE4udes festlegen (true | besucht & false | nicht besucht).\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 23\n    },\n    __self: this\n  }, \"\\xDCber den Update Button sendest du deinen gew\\xE4hlten Status an die Datenbank.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 24\n    },\n    __self: this\n  }, \"Du kannst frei entscheiden zu welchen Geb\\xE4uden du Informationen teilen m\\xF6chtest. Es ist f\\xFCr uns und andere nicht ersichtlich welche Geb\\xE4ude du editierst. Die Daten werden direkt bei der Erfassung auf Stadtteilebene aggregiert.\")), React.createElement(Button, {\n    buttonText: `Datenschutz `,\n    faIcon: open[1] ? usedIcons[8] : usedIcons[7],\n    clickButton: () => setOpen([open[0], !open[1]]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 26\n    },\n    __self: this\n  }), React.createElement(\"div\", {\n    className: open[1] ? 'notCollapsedInst' : 'collapsedInst',\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 31\n    },\n    __self: this\n  }, React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 32\n    },\n    __self: this\n  }, \"Bei der Datenerhebung werden keine nutzerspezifischen Daten erfasst. Jedem User wird ein vom Server zuf\\xE4llig generiertes Pseudonym in Form eines 128-stelligen Tokens zugeordnet. Eine Registrierung ist nicht erforderlich.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 33\n    },\n    __self: this\n  }, \"Bei einem Update eines Geb\\xE4udes sendest du nur den gew\\xE4hlten Status von diesem. Gleichzeitig wird der Zeitpunkt der letzten Aktualisierung in der Datenbank gespeichert sowie das Pseudonym des Nutzers.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 34\n    },\n    __self: this\n  }, \"Die hier erfassten Daten d\\xFCrfen nicht kommerziell oder f\\xFCr andere Zwecke genutzt werden. Sie dienen ausschlie\\xDFlich dem wissenschaftlichen Erkenntnisinteresse dieser Arbeit.\"), React.createElement(\"li\", {\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \"Die dargestellten Hausumringe basieren auf einem Datensatz der \", React.createElement(\"a\", {\n    target: \"_blank\",\n    href: \"https://www.bezreg-koeln.nrw.de/brk_internet/geobasis/liegenschaftskataster/hausumringe/index.html\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 36\n    },\n    __self: this\n  }, \" Bezirksregierung K\\xF6ln\"), \".\")), React.createElement(Button, {\n    buttonText: `Token erneuern ${usedIcons[10]}`,\n    faIcon: `${usedIcons[10]}`,\n    clickButton: () => setOpen([open[0], !open[1]]),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 38\n    },\n    __self: this\n  })));\n};\n\nexport default Instructions;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4_Semester/MA/WebGIS/app/src/components/Instructions.tsx"],"names":["React","useState","Button","usedIcons","Instructions","props","open","setOpen"],"mappings":";AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,OAAOC,MAAP,MAAmB,UAAnB;AACA,SAASC,SAAT,QAA0B,oBAA1B;;AAGA,MAAMC,YAAY,GAAIC,KAAD,IAA8B;AAE/C,QAAM,CAACC,IAAD,EAAOC,OAAP,IAAkBN,QAAQ,CAAC,CAAC,KAAD,EAAQ,IAAR,CAAD,CAAhC;AAEA,SACI,0CACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,oBAAC,MAAD;AACI,IAAA,UAAU,EAAG,0BADjB;AAEI,IAAA,MAAM,EAAEK,IAAI,CAAC,CAAD,CAAJ,GAAUH,SAAS,CAAC,CAAD,CAAnB,GAAyBA,SAAS,CAAC,CAAD,CAF9C;AAGI,IAAA,WAAW,EAAE,MAAMI,OAAO,CAAC,CAAC,CAACD,IAAI,CAAC,CAAD,CAAN,EAAWA,IAAI,CAAC,CAAD,CAAf,CAAD,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAMI;AAAK,IAAA,SAAS,EAAEA,IAAI,CAAC,CAAD,CAAJ,GAAU,kBAAV,GAA+B,eAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kGADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uJAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uBAAe;AAAG,IAAA,SAAS,EAAEH,SAAS,CAAC,CAAD,CAAvB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAAf,0JAHJ,EAII;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,yFAJJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sPALJ,CANJ,EAaI,oBAAC,MAAD;AACI,IAAA,UAAU,EAAG,cADjB;AAEI,IAAA,MAAM,EAAEG,IAAI,CAAC,CAAD,CAAJ,GAAUH,SAAS,CAAC,CAAD,CAAnB,GAAyBA,SAAS,CAAC,CAAD,CAF9C;AAGI,IAAA,WAAW,EAAE,MAAMI,OAAO,CAAC,CAACD,IAAI,CAAC,CAAD,CAAL,EAAU,CAACA,IAAI,CAAC,CAAD,CAAf,CAAD,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAbJ,EAkBI;AAAK,IAAA,SAAS,EAAEA,IAAI,CAAC,CAAD,CAAJ,GAAU,kBAAV,GAA+B,eAA/C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,uOADJ,EAEI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,sNAFJ,EAGI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,6LAHJ,EAKI;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,wEAAmE;AAAG,IAAA,MAAM,EAAC,QAAV;AAAmB,IAAA,IAAI,EAAC,oGAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,iCAAnE,MALJ,CAlBJ,EAyBI,oBAAC,MAAD;AACI,IAAA,UAAU,EAAG,kBAAiBH,SAAS,CAAC,EAAD,CAAK,EADhD;AAEI,IAAA,MAAM,EAAG,GAAEA,SAAS,CAAC,EAAD,CAAK,EAF7B;AAGI,IAAA,WAAW,EAAE,MAAMI,OAAO,CAAC,CAACD,IAAI,CAAC,CAAD,CAAL,EAAU,CAACA,IAAI,CAAC,CAAD,CAAf,CAAD,CAH9B;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IAzBJ,CADJ,CADJ;AAmCH,CAvCD;;AAyCA,eAAeF,YAAf","sourcesContent":["import React, { useState } from 'react';\r\nimport { IInstructionProps } from '../types/types';\r\nimport Button from './Button';\r\nimport { usedIcons } from '../utils/MapConfig';\r\n\r\n\r\nconst Instructions = (props: IInstructionProps) => {\r\n\r\n    const [open, setOpen] = useState([false, true]);\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button\r\n                    buttonText={`Besuchte Orte markieren `}\r\n                    faIcon={open[0] ? usedIcons[8] : usedIcons[7]}\r\n                    clickButton={() => setOpen([!open[0], open[1]])}\r\n                />\r\n                <div className={open[0] ? 'notCollapsedInst' : 'collapsedInst'}>\r\n                    <li>Zoome in die Karte hinein. Es erscheinen Hausumringe von allen Gebäuden im Stadtgebiet.</li>\r\n                    <li>Wenn du an Corona erkrankt bist/warst, kannst du per Klick ein Gebäude selektieren in dem du dich kurz vor deiner Diagnose aufgehalten hast.</li>\r\n                    <li>Wähle dann <i className={usedIcons[2]}></i> vom Menü links. Über den dortigen Button kannst du den Status des gewählten Gebäudes festlegen (true | besucht & false | nicht besucht).</li>\r\n                    <li>Über den Update Button sendest du deinen gewählten Status an die Datenbank.</li>\r\n                    <li>Du kannst frei entscheiden zu welchen Gebäuden du Informationen teilen möchtest. Es ist für uns und andere nicht ersichtlich welche Gebäude du editierst. Die Daten werden direkt bei der Erfassung auf Stadtteilebene aggregiert.</li>\r\n                </div>\r\n                <Button\r\n                    buttonText={`Datenschutz `}\r\n                    faIcon={open[1] ? usedIcons[8] : usedIcons[7]}\r\n                    clickButton={() => setOpen([open[0], !open[1]])}\r\n                />\r\n                <div className={open[1] ? 'notCollapsedInst' : 'collapsedInst'}>\r\n                    <li>Bei der Datenerhebung werden keine nutzerspezifischen Daten erfasst. Jedem User wird ein vom Server zufällig generiertes Pseudonym in Form eines 128-stelligen Tokens zugeordnet. Eine Registrierung ist nicht erforderlich.</li>\r\n                    <li>Bei einem Update eines Gebäudes sendest du nur den gewählten Status von diesem. Gleichzeitig wird der Zeitpunkt der letzten Aktualisierung in der Datenbank gespeichert sowie das Pseudonym des Nutzers.</li>\r\n                    <li>Die hier erfassten Daten dürfen nicht kommerziell oder für andere Zwecke genutzt werden. Sie dienen ausschließlich dem wissenschaftlichen Erkenntnisinteresse dieser Arbeit.</li>\r\n                    {/* <li>Du kannst die Ergebnisse der Datenerhebung live <a target='_blank' href='http://192.168.2.185:4000'>HIER</a> mitverfolgen.</li> */}\r\n                    <li>Die dargestellten Hausumringe basieren auf einem Datensatz der <a target='_blank' href='https://www.bezreg-koeln.nrw.de/brk_internet/geobasis/liegenschaftskataster/hausumringe/index.html'> Bezirksregierung Köln</a>.</li>\r\n                </div>\r\n                <Button\r\n                    buttonText={`Token erneuern ${usedIcons[10]}`}\r\n                    faIcon={`${usedIcons[10]}`}\r\n                    clickButton={() => setOpen([open[0], !open[1]])}\r\n                />\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Instructions;\r\n"]},"metadata":{},"sourceType":"module"}