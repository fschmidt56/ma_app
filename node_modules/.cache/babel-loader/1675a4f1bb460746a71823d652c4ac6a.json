{"ast":null,"code":"import Style from \"ol/style/Style\";\nimport Stroke from \"ol/style/Stroke\";\nimport Fill from \"ol/style/Fill\";\nimport Circle from \"ol/geom/Circle\";\nimport { getVectorContext } from \"ol/render\";\nimport { easeOut } from 'ol/easing';\nimport { unByKey } from \"ol/Observable\";\nexport const activeToggleColor = 'rgba(141,174,16,1)';\nexport const strokeOpacity = 0.75;\nexport const fillOpacity = 0.25;\nexport const selectedColor = [`rgba(141,174, 16,${strokeOpacity})`, `rgba(141,174, 16,${fillOpacity})`];\nexport const defaultColor = [`rgba(0,53,96,${strokeOpacity})`, `rgba(0,103,188,${fillOpacity})`];\nexport const trackColor = [`rgba(168,0,2,${strokeOpacity})`, `rgba(50,188,0,${strokeOpacity})`];\nexport const insertedStyle = new Style({\n  stroke: new Stroke({\n    color: trackColor[1],\n    width: 2\n  })\n});\nexport const selectedStyle = new Style({\n  stroke: new Stroke({\n    color: selectedColor[0],\n    width: 3\n  }),\n  fill: new Fill({\n    color: selectedColor[1]\n  })\n});\nexport function defaultStyle(feature) {\n  let style = new Style({\n    stroke: new Stroke({\n      color: feature.get('visited') ? selectedColor[0] : defaultColor[0],\n      width: 1\n    }),\n    fill: new Fill({\n      color: feature.get('visited') ? selectedColor[1] : defaultColor[1]\n    })\n  });\n  return style;\n}\nvar duration = 3000;\nexport function flash(feature, map) {\n  var start = new Date().getTime();\n  var listenerKey;\n\n  function animate(event) {\n    var vectorContext = getVectorContext(event);\n    var frameState = event.frameState;\n    var flashGeom = feature.getGeometry().clone();\n    var elapsed = frameState.time - start;\n    var elapsedRatio = elapsed / duration; // radius will be 5 at start and 30 at end.\n\n    var radius = easeOut(elapsedRatio) * 25 + 5;\n    var opacity = easeOut(1 - elapsedRatio);\n    var style = new Style({\n      image: new Circle({\n        //@ts-ignore\n        radius: radius,\n        stroke: new Stroke({\n          color: 'rgba(255, 0, 0, ' + opacity + ')',\n          width: 0.25 + opacity\n        })\n      })\n    });\n    vectorContext.setStyle(style);\n    vectorContext.drawGeometry(flashGeom);\n\n    if (elapsed > duration) {\n      unByKey(listenerKey);\n      return;\n    }\n\n    map.render();\n  }\n\n  listenerKey = map.on('postrender', animate);\n}","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/app/src/utils/MapStyles.tsx"],"names":["Style","Stroke","Fill","Circle","getVectorContext","easeOut","unByKey","activeToggleColor","strokeOpacity","fillOpacity","selectedColor","defaultColor","trackColor","insertedStyle","stroke","color","width","selectedStyle","fill","defaultStyle","feature","style","get","duration","flash","map","start","Date","getTime","listenerKey","animate","event","vectorContext","frameState","flashGeom","getGeometry","clone","elapsed","time","elapsedRatio","radius","opacity","image","setStyle","drawGeometry","render","on"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,gBAAlB;AACA,OAAOC,MAAP,MAAmB,iBAAnB;AACA,OAAOC,IAAP,MAAiB,eAAjB;AAEA,OAAOC,MAAP,MAAmB,gBAAnB;AACA,SAASC,gBAAT,QAAiC,WAAjC;AACA,SAASC,OAAT,QAAwB,WAAxB;AACA,SAASC,OAAT,QAAwB,eAAxB;AAGA,OAAO,MAAMC,iBAAyB,GAAG,oBAAlC;AACP,OAAO,MAAMC,aAAqB,GAAG,IAA9B;AACP,OAAO,MAAMC,WAAmB,GAAG,IAA5B;AACP,OAAO,MAAMC,aAAuB,GAAG,CAClC,oBAAmBF,aAAc,GADC,EAElC,oBAAmBC,WAAY,GAFG,CAAhC;AAIP,OAAO,MAAME,YAAsB,GAAG,CACjC,gBAAeH,aAAc,GADI,EAEjC,kBAAiBC,WAAY,GAFI,CAA/B;AAIP,OAAO,MAAMG,UAAoB,GAAG,CAC/B,gBAAeJ,aAAc,GADE,EAE/B,iBAAgBA,aAAc,GAFC,CAA7B;AAKP,OAAO,MAAMK,aAAoB,GAAG,IAAIb,KAAJ,CAAU;AAC1Cc,EAAAA,MAAM,EAAE,IAAIb,MAAJ,CAAW;AACfc,IAAAA,KAAK,EAAEH,UAAU,CAAC,CAAD,CADF;AAEfI,IAAAA,KAAK,EAAE;AAFQ,GAAX;AADkC,CAAV,CAA7B;AAOP,OAAO,MAAMC,aAAa,GAAG,IAAIjB,KAAJ,CAAU;AACnCc,EAAAA,MAAM,EAAE,IAAIb,MAAJ,CAAW;AACfc,IAAAA,KAAK,EAAEL,aAAa,CAAC,CAAD,CADL;AAEfM,IAAAA,KAAK,EAAE;AAFQ,GAAX,CAD2B;AAKnCE,EAAAA,IAAI,EAAE,IAAIhB,IAAJ,CAAS;AACXa,IAAAA,KAAK,EAAEL,aAAa,CAAC,CAAD;AADT,GAAT;AAL6B,CAAV,CAAtB;AAUP,OAAO,SAASS,YAAT,CAAsBC,OAAtB,EAAmD;AACtD,MAAIC,KAAY,GAAG,IAAIrB,KAAJ,CAAU;AACzBc,IAAAA,MAAM,EAAE,IAAIb,MAAJ,CAAW;AACfc,MAAAA,KAAK,EAAEK,OAAO,CAACE,GAAR,CAAY,SAAZ,IAAyBZ,aAAa,CAAC,CAAD,CAAtC,GAA4CC,YAAY,CAAC,CAAD,CADhD;AAEfK,MAAAA,KAAK,EAAE;AAFQ,KAAX,CADiB;AAKzBE,IAAAA,IAAI,EAAE,IAAIhB,IAAJ,CAAS;AACXa,MAAAA,KAAK,EAAEK,OAAO,CAACE,GAAR,CAAY,SAAZ,IAAyBZ,aAAa,CAAC,CAAD,CAAtC,GAA4CC,YAAY,CAAC,CAAD;AADpD,KAAT;AALmB,GAAV,CAAnB;AASA,SAAOU,KAAP;AACH;AAED,IAAIE,QAAQ,GAAG,IAAf;AACA,OAAO,SAASC,KAAT,CAAeJ,OAAf,EAAiCK,GAAjC,EAA2C;AAC9C,MAAIC,KAAK,GAAG,IAAIC,IAAJ,GAAWC,OAAX,EAAZ;AACA,MAAIC,WAAJ;;AAEA,WAASC,OAAT,CAAiBC,KAAjB,EAA6B;AACzB,QAAIC,aAAa,GAAG5B,gBAAgB,CAAC2B,KAAD,CAApC;AACA,QAAIE,UAAU,GAAGF,KAAK,CAACE,UAAvB;AACA,QAAIC,SAAS,GAAGd,OAAO,CAACe,WAAR,GAAsBC,KAAtB,EAAhB;AACA,QAAIC,OAAO,GAAGJ,UAAU,CAACK,IAAX,GAAkBZ,KAAhC;AACA,QAAIa,YAAY,GAAGF,OAAO,GAAGd,QAA7B,CALyB,CAMzB;;AACA,QAAIiB,MAAM,GAAGnC,OAAO,CAACkC,YAAD,CAAP,GAAwB,EAAxB,GAA6B,CAA1C;AACA,QAAIE,OAAO,GAAGpC,OAAO,CAAC,IAAIkC,YAAL,CAArB;AAEA,QAAIlB,KAAK,GAAG,IAAIrB,KAAJ,CAAU;AAClB0C,MAAAA,KAAK,EAAE,IAAIvC,MAAJ,CAAW;AACd;AACAqC,QAAAA,MAAM,EAAEA,MAFM;AAGd1B,QAAAA,MAAM,EAAE,IAAIb,MAAJ,CAAW;AACfc,UAAAA,KAAK,EAAE,qBAAqB0B,OAArB,GAA+B,GADvB;AAEfzB,UAAAA,KAAK,EAAE,OAAOyB;AAFC,SAAX;AAHM,OAAX;AADW,KAAV,CAAZ;AAWAT,IAAAA,aAAa,CAACW,QAAd,CAAuBtB,KAAvB;AACAW,IAAAA,aAAa,CAACY,YAAd,CAA2BV,SAA3B;;AACA,QAAIG,OAAO,GAAGd,QAAd,EAAwB;AACpBjB,MAAAA,OAAO,CAACuB,WAAD,CAAP;AACA;AACH;;AACDJ,IAAAA,GAAG,CAACoB,MAAJ;AACH;;AAEDhB,EAAAA,WAAW,GAAGJ,GAAG,CAACqB,EAAJ,CAAO,YAAP,EAAqBhB,OAArB,CAAd;AACH","sourcesContent":["import Style from \"ol/style/Style\";\r\nimport Stroke from \"ol/style/Stroke\";\r\nimport Fill from \"ol/style/Fill\";\r\nimport Feature, { FeatureLike } from \"ol/Feature\";\r\nimport Circle from \"ol/geom/Circle\";\r\nimport { getVectorContext } from \"ol/render\";\r\nimport { easeOut } from 'ol/easing';\r\nimport { unByKey } from \"ol/Observable\";\r\nimport { Map } from \"ol\";\r\n\r\nexport const activeToggleColor: string = 'rgba(141,174,16,1)';\r\nexport const strokeOpacity: number = 0.75;\r\nexport const fillOpacity: number = 0.25;\r\nexport const selectedColor: string[] = [\r\n    `rgba(141,174, 16,${strokeOpacity})`,\r\n    `rgba(141,174, 16,${fillOpacity})`,\r\n];\r\nexport const defaultColor: string[] = [\r\n    `rgba(0,53,96,${strokeOpacity})`,\r\n    `rgba(0,103,188,${fillOpacity})`,\r\n];\r\nexport const trackColor: string[] = [\r\n    `rgba(168,0,2,${strokeOpacity})`,\r\n    `rgba(50,188,0,${strokeOpacity})`\r\n]\r\n\r\nexport const insertedStyle: Style = new Style({\r\n    stroke: new Stroke({\r\n        color: trackColor[1],\r\n        width: 2,\r\n    }),\r\n});\r\n\r\nexport const selectedStyle = new Style({\r\n    stroke: new Stroke({\r\n        color: selectedColor[0],\r\n        width: 3,\r\n    }),\r\n    fill: new Fill({\r\n        color: selectedColor[1],\r\n    })\r\n});\r\n\r\nexport function defaultStyle(feature: FeatureLike): Style {\r\n    let style: Style = new Style({\r\n        stroke: new Stroke({\r\n            color: feature.get('visited') ? selectedColor[0] : defaultColor[0],\r\n            width: 1\r\n        }),\r\n        fill: new Fill({\r\n            color: feature.get('visited') ? selectedColor[1] : defaultColor[1],\r\n        })\r\n    });\r\n    return style;\r\n}\r\n\r\nvar duration = 3000;\r\nexport function flash(feature: Feature, map: Map) {\r\n    var start = new Date().getTime();\r\n    var listenerKey: any;\r\n\r\n    function animate(event: any) {\r\n        var vectorContext = getVectorContext(event);\r\n        var frameState = event.frameState;\r\n        var flashGeom = feature.getGeometry().clone();\r\n        var elapsed = frameState.time - start;\r\n        var elapsedRatio = elapsed / duration;\r\n        // radius will be 5 at start and 30 at end.\r\n        var radius = easeOut(elapsedRatio) * 25 + 5;\r\n        var opacity = easeOut(1 - elapsedRatio);\r\n\r\n        var style = new Style({\r\n            image: new Circle({\r\n                //@ts-ignore\r\n                radius: radius,\r\n                stroke: new Stroke({\r\n                    color: 'rgba(255, 0, 0, ' + opacity + ')',\r\n                    width: 0.25 + opacity\r\n                })\r\n            })\r\n        });\r\n\r\n        vectorContext.setStyle(style);\r\n        vectorContext.drawGeometry(flashGeom);\r\n        if (elapsed > duration) {\r\n            unByKey(listenerKey);\r\n            return;\r\n        }\r\n        map.render();\r\n    }\r\n\r\n    listenerKey = map.on('postrender', animate);\r\n}\r\n\r\n"]},"metadata":{},"sourceType":"module"}