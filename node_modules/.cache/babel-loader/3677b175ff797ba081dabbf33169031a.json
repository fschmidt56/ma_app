{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Documents\\\\app\\\\src\\\\components\\\\MapSidebar.tsx\";\nimport React, { useState } from 'react';\nimport 'ol/ol.css';\nimport Sidebar from './Sidebar';\nimport Tab from './Tab';\nimport ToggleButton from './ToogleButton';\nimport TabContent from './TabContent';\nimport { Feature } from 'ol';\nimport { activeToggleColor } from '../utils/MapStyles';\nimport Button from './Button';\nimport { geoserverWfsUrl, transactionParameters, wfsTransaction, geoserverHeaders } from '../utils/MapConfig';\nimport { MapUtils } from '../utils/MapUtils';\nconst mapListeners = [];\n\nconst MapSidebar = props => {\n  const {\n    map\n  } = props;\n  const [collapsed, setCollapsed] = useState(true);\n  const [selected, setSelected] = useState(undefined);\n  const [toggleValue, setToggleValue] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(new Feature());\n  const [transactionResponse, setResponse] = useState('');\n\n  function onClose() {\n    setCollapsed(true); //@ts-ignore\n\n    setSelected(undefined);\n  }\n\n  function onOpen(id) {\n    setCollapsed(false); //@ts-ignore\n\n    setSelected(id);\n  }\n\n  ;\n\n  function onToggleChange() {\n    setToggleValue(!toggleValue);\n    selectedFeature.set('visited', !toggleValue);\n  }\n\n  const saveData = () => {\n    if (selectedFeature) {\n      if (selectedFeature.getId()) {\n        selectedFeature.unset('selected');\n        selectedFeature.getId();\n        selectedFeature.setGeometryName('geom');\n        selectedFeature.set('visited', toggleValue);\n        let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([], [selectedFeature], [], transactionParameters));\n        fetch(geoserverWfsUrl, {\n          method: 'POST',\n          mode: 'no-cors',\n          headers: geoserverHeaders,\n          body: xmlString\n        }).then(response => setResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`)).then(() => {\n          //@ts-ignore\n          const layer = map.getLayers().getArray()[1];\n          layer.getSource().clear();\n          layer.getSource().refresh();\n        }).catch(error => console.log(error + 'Feature could not be updated.'));\n      } else {\n        setResponse('No feature selected.');\n        return;\n      }\n    } else {\n      setResponse('Feature could not be updated.');\n      return;\n    }\n  };\n\n  let prevSelected = [];\n\n  if (map) {\n    if (mapListeners.length === 0) {\n      const mapListener = map.on('click', function (e) {\n        map.forEachFeatureAtPixel(e.pixel, feature => {\n          let castedFeature = feature;\n          prevSelected.unshift(castedFeature);\n          setSelectedFeature(prevSelected[0]);\n          prevSelected[0].set('selected', true);\n\n          if (prevSelected.length > 1) {\n            prevSelected[1].set('selected', false);\n          }\n\n          prevSelected.splice(1);\n        });\n      });\n      mapListeners.push(mapListener);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Sidebar, {\n    id: \"sidebar\",\n    collapsed: collapsed,\n    selected: selected,\n    onClose: onClose //@ts-ignore\n    ,\n    doOpen: onOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 103\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    id: \"home\",\n    header: \"Home\",\n    faIcon: \"fa fa-bars\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 111\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    }, \"This is Home.\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 116\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"database\",\n    header: \"Database\",\n    faIcon: \"fa fa-database\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 120\n    },\n    __self: this\n  }), React.createElement(Tab, {\n    id: \"locations\",\n    header: \"Set visited locations\",\n    faIcon: \"fa fa-mouse-pointer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 125\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(ToggleButton, {\n      id: \"toggleVisited\",\n      isOn: selectedFeature.get('visited'),\n      isOnColor: activeToggleColor,\n      handleToggle: onToggleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }), JSON.stringify(selectedFeature.get('visited')), React.createElement(Button, {\n      buttonText: \"Update\",\n      response: transactionResponse,\n      clickButton: saveData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 141\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 130\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"tracking\",\n    header: \"Tracking\",\n    faIcon: \"fa fa-map\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 149\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Button, {\n      buttonText: \"Start tracking\",\n      clickButton: MapUtils.createGeolocation(),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 156\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: \"Quit tracking\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 160\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"settings\",\n    header: \"Settings\",\n    faIcon: \"fa fa-cogs\",\n    disabled: true,\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 166\n    },\n    __self: this\n  }), React.createElement(Tab, {\n    id: \"off\",\n    header: \"PowerOff\",\n    faIcon: \"fa fa-power-off\",\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 172\n    },\n    __self: this\n  })));\n};\n\nexport default MapSidebar;","map":{"version":3,"sources":["C:/Users/Fabi/Documents/app/src/components/MapSidebar.tsx"],"names":["React","useState","Sidebar","Tab","ToggleButton","TabContent","Feature","activeToggleColor","Button","geoserverWfsUrl","transactionParameters","wfsTransaction","geoserverHeaders","MapUtils","mapListeners","MapSidebar","props","map","collapsed","setCollapsed","selected","setSelected","undefined","toggleValue","setToggleValue","selectedFeature","setSelectedFeature","transactionResponse","setResponse","onClose","onOpen","id","onToggleChange","set","saveData","getId","unset","setGeometryName","xmlString","XMLSerializer","serializeToString","writeTransaction","fetch","method","mode","headers","body","then","response","layer","getLayers","getArray","getSource","clear","refresh","catch","error","console","log","prevSelected","length","mapListener","on","e","forEachFeatureAtPixel","pixel","feature","castedFeature","unshift","splice","push","get","JSON","stringify","createGeolocation"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport ToggleButton from './ToogleButton';\r\nimport TabContent from './TabContent';\r\nimport { Feature, MapBrowserEvent } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport { activeToggleColor } from '../utils/MapStyles';\r\nimport Button from './Button';\r\nimport { geoserverWfsUrl, transactionParameters, wfsTransaction, geoserverHeaders } from '../utils/MapConfig';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { MapUtils } from '../utils/MapUtils';\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const [selected, setSelected] = useState(undefined);\r\n    const [toggleValue, setToggleValue] = useState(false);\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature())\r\n    const [transactionResponse, setResponse] = useState('')\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n    function onToggleChange() {\r\n        setToggleValue(!toggleValue)\r\n        selectedFeature.set('visited', !toggleValue)\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (selectedFeature) {\r\n            if (selectedFeature.getId()) {\r\n                selectedFeature.unset('selected')\r\n                selectedFeature.getId();\r\n                selectedFeature.setGeometryName('geom');\r\n                selectedFeature.set('visited', toggleValue)\r\n                let xmlString = new XMLSerializer().serializeToString(\r\n                    wfsTransaction.writeTransaction([], [selectedFeature], [], transactionParameters)\r\n                )\r\n                fetch(geoserverWfsUrl, {\r\n                    method: 'POST',\r\n                    mode: 'no-cors',\r\n                    headers: geoserverHeaders,\r\n                    body: xmlString\r\n                })\r\n                    .then(response => setResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`))\r\n                    .then(() => {\r\n                        //@ts-ignore\r\n                        const layer: VectorLayer = map!.getLayers().getArray()[1]\r\n                        layer.getSource().clear()\r\n                        layer.getSource().refresh()\r\n                    })\r\n                    .catch(error => console.log(error + 'Feature could not be updated.'));\r\n            }\r\n            else {\r\n                setResponse('No feature selected.')\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            setResponse('Feature could not be updated.')\r\n            return;\r\n        }\r\n    }\r\n\r\n    let prevSelected: Feature[] = []\r\n\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature | FeatureLike): void => {\r\n                    let castedFeature: Feature = feature as Feature;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Home'\r\n                    faIcon='fa fa-bars'\r\n                >\r\n                    <TabContent\r\n                        content={<p>This is Home.</p>}\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='database'\r\n                    header='Database'\r\n                    faIcon='fa fa-database'\r\n                />\r\n                <Tab\r\n                    id='locations'\r\n                    header='Set visited locations'\r\n                    faIcon='fa fa-mouse-pointer'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <ToggleButton\r\n                                id='toggleVisited'\r\n                                isOn={selectedFeature.get('visited')}\r\n                                isOnColor={activeToggleColor}\r\n                                handleToggle={onToggleChange}\r\n                            />\r\n                            {\r\n                                JSON.stringify(selectedFeature.get('visited'))\r\n                            }\r\n                            <Button\r\n                                buttonText='Update'\r\n                                response={transactionResponse}\r\n                                clickButton={saveData}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='tracking'\r\n                    header='Tracking'\r\n                    faIcon='fa fa-map'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Button\r\n                                buttonText='Start tracking'\r\n                                clickButton={MapUtils.createGeolocation()}\r\n                            />\r\n                            <Button\r\n                                buttonText='Quit tracking'\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='settings'\r\n                    header='Settings'\r\n                    faIcon='fa fa-cogs'\r\n                    disabled={true}\r\n                    anchor='bottom' />\r\n                <Tab\r\n                    id='off'\r\n                    header='PowerOff'\r\n                    faIcon='fa fa-power-off'\r\n                    anchor='bottom' />\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;"]},"metadata":{},"sourceType":"module"}