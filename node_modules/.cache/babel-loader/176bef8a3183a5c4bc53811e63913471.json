{"ast":null,"code":"import _slicedToArray from\"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4_Semester\\\\MA\\\\WebGIS\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState,useEffect}from'react';import'ol/ol.css';import Sidebar from'./Sidebar';import Tab from'./Tab';import ToggleButton from'./ToogleButton';import TabContent from'./TabContent';import{Feature}from'ol';import{activeToggleColor}from'../utils/MapStyles';import Button from'./Button';import{wfsTransaction,usedIcons,updateParameters,geoserverFetchUrl}from'../utils/MapConfig';import{MapUtils}from'../utils/MapUtils';import Legend from'./Legend';import Instructions from'./Instructions';import Home from'./Home';import Image from'./Image';import logo from'../img/rub_logo.png';import Loading from'./Loading';var mapListeners=[];var MapSidebar=function MapSidebar(props){var map=props.map;var _useState=useState(false),_useState2=_slicedToArray(_useState,2),collapsed=_useState2[0],setCollapsed=_useState2[1];var _useState3=useState('home'),_useState4=_slicedToArray(_useState3,2),selected=_useState4[0],setSelected=_useState4[1];var _useState5=useState(false),_useState6=_slicedToArray(_useState5,2),toggleValue=_useState6[0],setToggleValue=_useState6[1];var _useState7=useState(new Feature()),_useState8=_slicedToArray(_useState7,2),selectedFeature=_useState8[0],setSelectedFeature=_useState8[1];var _useState9=useState(''),_useState10=_slicedToArray(_useState9,2),transactionResponse=_useState10[0],setTransactionResponse=_useState10[1];var _useState11=useState(''),_useState12=_slicedToArray(_useState11,2),trackResponse=_useState12[0],setTrackResponse=_useState12[1];var _useState13=useState(localStorage.getItem('VgiUserToken')),_useState14=_slicedToArray(_useState13,2),token=_useState14[0],setToken=_useState14[1];function hashUser(){fetch('http://192.168.2.185:8000/hash').then(function(response){return response.json();}).then(function(value){return localStorage.setItem('VgiUserToken',value);});}useEffect(function(){if(localStorage.getItem('VgiUserToken')===null){hashUser();}else{return;}},[]);function onClose(){setCollapsed(true);//@ts-ignore\nsetSelected(undefined);}function onOpen(id){setCollapsed(false);//@ts-ignore\nsetSelected(id);};function onToggleChange(){setToggleValue(!toggleValue);selectedFeature.set('visited',!toggleValue);}var saveData=function saveData(){if(selectedFeature){setTransactionResponse('Updating');if(selectedFeature.getId()){selectedFeature.unset('selected');selectedFeature.getId();selectedFeature.setGeometryName('geom');selectedFeature.set('visited',toggleValue);selectedFeature.set('edited_by',token);var xmlString=new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([],[selectedFeature],[],updateParameters));var body={xml:xmlString};fetch(geoserverFetchUrl,{method:'POST',body:JSON.stringify(body)}).then(function(){return setTransactionResponse(\"Updated Location with id \".concat(selectedFeature.getId(),\" successfully.\"));}).then(function(){return setTimeout(function(){return setTransactionResponse('');},3000);}).then(function(){//@ts-ignore\nvar layer=map.getLayers().getArray()[1];layer.getSource().clear();layer.getSource().refresh();}).catch(function(error){return console.log(error+'Feature could not be updated.');});}else{setTransactionResponse('No feature selected.');setTimeout(function(){return setTransactionResponse('');},3000);return;}}else{setTransactionResponse('Feature could not be updated.');setTimeout(function(){return setTransactionResponse('');},3000);return;}};// const saveTrack = () => {\n//     let linestring = locationFeature.getGeometry() as LineString;\n//     if (linestring) {\n//         const insertFeature = new Feature({\n//             geom: new MultiLineString([linestring])\n//         });\n//         insertFeature.set('user', 'fabi')\n//         let xmlString = new XMLSerializer().serializeToString(\n//             wfsTransaction.writeTransaction([insertFeature], [], [], insertParameters)\n//         )\n//         MapUtils.removeLastLayer(map)\n//         fetch(geoserverWfsUrl, {\n//             method: 'POST',\n//             mode: 'no-cors',\n//             body: xmlString\n//         })\n//             .then(response => setTrackResponse(`Track inserted to database with timestamp ${Utils.getDate()}.`))\n//             .then(() => {\n//                 //@ts-ignore\n//                 const layer: VectorLayer = map!.getLayers().getArray()[2];\n//                 layer.getSource().clear();\n//                 layer.getSource().refresh();\n//             })\n//             .then(() => setTimeout(() => setTrackResponse(''), 3000))\n//             .catch(error => console.log(error + 'Error while saving data.'));\n//     }\n//     else {\n//         setTrackResponse('No Track to save.');\n//         setTimeout(() => setTrackResponse(''), 3000);\n//         return;\n//     }\n// }\nvar prevSelected=[];if(map){if(mapListeners.length===0){var mapListener=map.on('click',function(e){map.forEachFeatureAtPixel(e.pixel,function(feature){var castedFeature=feature;prevSelected.unshift(castedFeature);setSelectedFeature(prevSelected[0]);prevSelected[0].set('selected',true);if(prevSelected.length>1){prevSelected[1].set('selected',false);}prevSelected.splice(1);});});mapListeners.push(mapListener);}}return React.createElement(React.Fragment,null,React.createElement(Sidebar,{id:\"sidebar\",collapsed:collapsed,selected:selected,onClose:onClose//@ts-ignore\n,doOpen:onOpen},React.createElement(Tab,{id:\"home\",header:\"Beschreibung\",faIcon:usedIcons[0]},React.createElement(TabContent,{content:React.createElement(React.Fragment,null,React.createElement(Home,null),React.createElement(Button,{buttonText:\"Informationen \",faIcon:usedIcons[1],clickButton:function clickButton(){return setSelected('instructions');}}),React.createElement(Image,{altText:\"RUB-Logo\",img:logo,link:\"https://www.geographie.ruhr-uni-bochum.de/forschung/geomatik/home-news/\"}))})),React.createElement(Tab,{id:\"locations\",header:\"Besuchte Geb\\xE4ude\",faIcon:usedIcons[2]},React.createElement(TabContent,{content:React.createElement(React.Fragment,null,React.createElement(Legend,{title:\"Legende\"}),React.createElement(ToggleButton,{id:\"toggleVisited\",isOn:selectedFeature.get('visited'),isOnColor:activeToggleColor,handleToggle:onToggleChange}),JSON.stringify(selectedFeature.get('visited')),transactionResponse!=='Updating'?React.createElement(Button,{buttonText:\"Update\",response:transactionResponse,clickButton:saveData}):React.createElement(Loading,null))})),React.createElement(Tab,{id:\"instructions\",header:\"Informationen\",faIcon:usedIcons[1],anchor:\"top\"},React.createElement(TabContent,{content:React.createElement(React.Fragment,null,React.createElement(Instructions,null))})),React.createElement(Tab,{id:\"tracking\",header:\"Standort lokalisieren\",faIcon:usedIcons[3]},React.createElement(TabContent,{content:React.createElement(React.Fragment,null,React.createElement(Button,{buttonText:\"Standort lokalisieren\",clickButton:function clickButton(){return MapUtils.createGeolocation(map);}}))})),React.createElement(Tab,{id:\"user-infos\",header:\"Nutzerinformationen\",faIcon:\"fa fa-user\",anchor:\"bottom\"},React.createElement(TabContent,{content:React.createElement(React.Fragment,null,React.createElement(\"li\",null,\"Nutzer Token entfernen lassen, selbst generieren?\"),React.createElement(\"li\",null,\"auf API hinweisen?\"))}))));};export default MapSidebar;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4_Semester/MA/WebGIS/app/src/components/MapSidebar.tsx"],"names":["React","useState","useEffect","Sidebar","Tab","ToggleButton","TabContent","Feature","activeToggleColor","Button","wfsTransaction","usedIcons","updateParameters","geoserverFetchUrl","MapUtils","Legend","Instructions","Home","Image","logo","Loading","mapListeners","MapSidebar","props","map","collapsed","setCollapsed","selected","setSelected","toggleValue","setToggleValue","selectedFeature","setSelectedFeature","transactionResponse","setTransactionResponse","trackResponse","setTrackResponse","localStorage","getItem","token","setToken","hashUser","fetch","then","response","json","value","setItem","onClose","undefined","onOpen","id","onToggleChange","set","saveData","getId","unset","setGeometryName","xmlString","XMLSerializer","serializeToString","writeTransaction","body","xml","method","JSON","stringify","setTimeout","layer","getLayers","getArray","getSource","clear","refresh","catch","error","console","log","prevSelected","length","mapListener","on","e","forEachFeatureAtPixel","pixel","feature","castedFeature","unshift","splice","push","get","createGeolocation"],"mappings":"8LACA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,CAA0BC,SAA1B,KAA2C,OAA3C,CACA,MAAO,WAAP,CAEA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CACA,MAAOC,CAAAA,GAAP,KAAgB,OAAhB,CACA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,UAAP,KAAuB,cAAvB,CACA,OAASC,OAAT,KAAyC,IAAzC,CAEA,OAASC,iBAAT,KAAkC,oBAAlC,CACA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAA0BC,cAA1B,CAA2DC,SAA3D,CAAwFC,gBAAxF,CAA0GC,iBAA1G,KAAmI,oBAAnI,CAEA,OAASC,QAAT,KAAyB,mBAAzB,CAEA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CAGA,MAAOC,CAAAA,YAAP,KAAyB,gBAAzB,CACA,MAAOC,CAAAA,IAAP,KAAiB,QAAjB,CACA,MAAOC,CAAAA,KAAP,KAAkB,SAAlB,CACA,MAAOC,CAAAA,IAAP,KAAiB,qBAAjB,CACA,MAAOC,CAAAA,OAAP,KAAoB,WAApB,CAEA,GAAMC,CAAAA,YAAY,CAAG,EAArB,CAEA,GAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,KAAD,CAA0C,IAEjDC,CAAAA,GAFiD,CAEzCD,KAFyC,CAEjDC,GAFiD,eAIvBvB,QAAQ,CAAC,KAAD,CAJe,wCAIlDwB,SAJkD,eAIvCC,YAJuC,8BAKzBzB,QAAQ,CAAkB,MAAlB,CALiB,yCAKlD0B,QALkD,eAKxCC,WALwC,8BAMnB3B,QAAQ,CAAC,KAAD,CANW,yCAMlD4B,WANkD,eAMrCC,cANqC,8BAOX7B,QAAQ,CAAC,GAAIM,CAAAA,OAAJ,EAAD,CAPG,yCAOlDwB,eAPkD,eAOjCC,kBAPiC,8BAQH/B,QAAQ,CAAC,EAAD,CARL,0CAQlDgC,mBARkD,gBAQ7BC,sBAR6B,gCASfjC,QAAQ,CAAC,EAAD,CATO,2CASlDkC,aATkD,gBASnCC,gBATmC,gCAU/BnC,QAAQ,CAACoC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAD,CAVuB,2CAUlDC,KAVkD,gBAU3CC,QAV2C,gBAYzD,QAASC,CAAAA,QAAT,EAAoB,CAChBC,KAAK,CAAC,gCAAD,CAAL,CACKC,IADL,CACU,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADlB,EAEKF,IAFL,CAEU,SAAAG,KAAK,QAAIT,CAAAA,YAAY,CAACU,OAAb,CAAqB,cAArB,CAAqCD,KAArC,CAAJ,EAFf,EAGH,CAED5C,SAAS,CAAC,UAAM,CACZ,GAAImC,YAAY,CAACC,OAAb,CAAqB,cAArB,IAAyC,IAA7C,CAAmD,CAC/CG,QAAQ,GACX,CAFD,IAGK,CAAE,OAAQ,CAClB,CALQ,CAKN,EALM,CAAT,CAOA,QAASO,CAAAA,OAAT,EAAmB,CACftB,YAAY,CAAC,IAAD,CAAZ,CACA;AACAE,WAAW,CAACqB,SAAD,CAAX,CACH,CACD,QAASC,CAAAA,MAAT,CAAgBC,EAAhB,CAA4B,CACxBzB,YAAY,CAAC,KAAD,CAAZ,CACA;AACAE,WAAW,CAACuB,EAAD,CAAX,CACH,EAED,QAASC,CAAAA,cAAT,EAA0B,CACtBtB,cAAc,CAAC,CAACD,WAAF,CAAd,CACAE,eAAe,CAACsB,GAAhB,CAAoB,SAApB,CAA+B,CAACxB,WAAhC,EACH,CAED,GAAMyB,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,EAAM,CACnB,GAAIvB,eAAJ,CAAqB,CACjBG,sBAAsB,CAAC,UAAD,CAAtB,CACA,GAAIH,eAAe,CAACwB,KAAhB,EAAJ,CAA6B,CACzBxB,eAAe,CAACyB,KAAhB,CAAsB,UAAtB,EACAzB,eAAe,CAACwB,KAAhB,GACAxB,eAAe,CAAC0B,eAAhB,CAAgC,MAAhC,EACA1B,eAAe,CAACsB,GAAhB,CAAoB,SAApB,CAA+BxB,WAA/B,EACAE,eAAe,CAACsB,GAAhB,CAAoB,WAApB,CAAiCd,KAAjC,EACA,GAAImB,CAAAA,SAAS,CAAG,GAAIC,CAAAA,aAAJ,GAAoBC,iBAApB,CACZlD,cAAc,CAACmD,gBAAf,CAAgC,EAAhC,CAAoC,CAAC9B,eAAD,CAApC,CAAuD,EAAvD,CAA2DnB,gBAA3D,CADY,CAAhB,CAGA,GAAIkD,CAAAA,IAAI,CAAG,CACPC,GAAG,CAAEL,SADE,CAAX,CAGAhB,KAAK,CAAC7B,iBAAD,CAAoB,CACrBmD,MAAM,CAAE,MADa,CAErBF,IAAI,CAAEG,IAAI,CAACC,SAAL,CAAeJ,IAAf,CAFe,CAApB,CAAL,CAIKnB,IAJL,CAIU,iBAAMT,CAAAA,sBAAsB,oCAA6BH,eAAe,CAACwB,KAAhB,EAA7B,mBAA5B,EAJV,EAKKZ,IALL,CAKU,iBAAMwB,CAAAA,UAAU,CAAC,iBAAMjC,CAAAA,sBAAsB,CAAC,EAAD,CAA5B,EAAD,CAAmC,IAAnC,CAAhB,EALV,EAMKS,IANL,CAMU,UAAM,CACR;AACA,GAAMyB,CAAAA,KAAkB,CAAG5C,GAAG,CAAE6C,SAAL,GAAiBC,QAAjB,GAA4B,CAA5B,CAA3B,CACAF,KAAK,CAACG,SAAN,GAAkBC,KAAlB,GACAJ,KAAK,CAACG,SAAN,GAAkBE,OAAlB,GACH,CAXL,EAYKC,KAZL,CAYW,SAAAC,KAAK,QAAIC,CAAAA,OAAO,CAACC,GAAR,CAAYF,KAAK,CAAG,+BAApB,CAAJ,EAZhB,EAaH,CAzBD,IA0BK,CACDzC,sBAAsB,CAAC,sBAAD,CAAtB,CACAiC,UAAU,CAAC,iBAAMjC,CAAAA,sBAAsB,CAAC,EAAD,CAA5B,EAAD,CAAmC,IAAnC,CAAV,CACA,OACH,CACJ,CAjCD,IAkCK,CACDA,sBAAsB,CAAC,+BAAD,CAAtB,CACAiC,UAAU,CAAC,iBAAMjC,CAAAA,sBAAsB,CAAC,EAAD,CAA5B,EAAD,CAAmC,IAAnC,CAAV,CACA,OACH,CACJ,CAxCD,CA0CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,GAAI4C,CAAAA,YAAuB,CAAG,EAA9B,CACA,GAAItD,GAAJ,CAAS,CACL,GAAIH,YAAY,CAAC0D,MAAb,GAAwB,CAA5B,CAA+B,CAC3B,GAAMC,CAAAA,WAAW,CAAGxD,GAAG,CAACyD,EAAJ,CAAO,OAAP,CAAgB,SAAUC,CAAV,CAAoC,CACpE1D,GAAG,CAAE2D,qBAAL,CAA2BD,CAAC,CAACE,KAA7B,CAAoC,SAACC,OAAD,CAA0C,CAC1E,GAAIC,CAAAA,aAAsB,CAAGD,OAA7B,CACAP,YAAY,CAACS,OAAb,CAAqBD,aAArB,EACAtD,kBAAkB,CAAC8C,YAAY,CAAC,CAAD,CAAb,CAAlB,CACAA,YAAY,CAAC,CAAD,CAAZ,CAAgBzB,GAAhB,CAAoB,UAApB,CAAgC,IAAhC,EACA,GAAIyB,YAAY,CAACC,MAAb,CAAsB,CAA1B,CAA6B,CACzBD,YAAY,CAAC,CAAD,CAAZ,CAAgBzB,GAAhB,CAAoB,UAApB,CAAgC,KAAhC,EACH,CACDyB,YAAY,CAACU,MAAb,CAAoB,CAApB,EACH,CATD,EAUH,CAXmB,CAApB,CAYAnE,YAAY,CAACoE,IAAb,CAAkBT,WAAlB,EACH,CACJ,CAED,MACI,yCACI,oBAAC,OAAD,EACI,EAAE,CAAC,SADP,CAEI,SAAS,CAAEvD,SAFf,CAGI,QAAQ,CAAEE,QAHd,CAII,OAAO,CAAEqB,OACT;AALJ,CAMI,MAAM,CAAEE,MANZ,EAQI,oBAAC,GAAD,EACI,EAAE,CAAC,MADP,CAEI,MAAM,CAAC,cAFX,CAGI,MAAM,CAAEvC,SAAS,CAAC,CAAD,CAHrB,EAKI,oBAAC,UAAD,EAAY,OAAO,CACf,wCACI,oBAAC,IAAD,MADJ,CAEI,oBAAC,MAAD,EACI,UAAU,iBADd,CAEI,MAAM,CAAEA,SAAS,CAAC,CAAD,CAFrB,CAGI,WAAW,CAAE,6BAAMiB,CAAAA,WAAW,CAAC,cAAD,CAAjB,EAHjB,EAFJ,CAOI,oBAAC,KAAD,EACI,OAAO,CAAC,UADZ,CAEI,GAAG,CAAET,IAFT,CAGI,IAAI,CAAC,yEAHT,EAPJ,CADJ,EALJ,CARJ,CA8BI,oBAAC,GAAD,EACI,EAAE,CAAC,WADP,CAEI,MAAM,CAAC,qBAFX,CAGI,MAAM,CAAER,SAAS,CAAC,CAAD,CAHrB,EAKI,oBAAC,UAAD,EAAY,OAAO,CACf,wCACI,oBAAC,MAAD,EACI,KAAK,CAAC,SADV,EADJ,CAII,oBAAC,YAAD,EACI,EAAE,CAAC,eADP,CAEI,IAAI,CAAEoB,eAAe,CAAC2D,GAAhB,CAAoB,SAApB,CAFV,CAGI,SAAS,CAAElF,iBAHf,CAII,YAAY,CAAE4C,cAJlB,EAJJ,CAWQa,IAAI,CAACC,SAAL,CAAenC,eAAe,CAAC2D,GAAhB,CAAoB,SAApB,CAAf,CAXR,CAcQzD,mBAAmB,GAAK,UAAxB,CACI,oBAAC,MAAD,EACI,UAAU,CAAC,QADf,CAEI,QAAQ,CAAEA,mBAFd,CAGI,WAAW,CAAEqB,QAHjB,EADJ,CAOI,oBAAC,OAAD,MArBZ,CADJ,EALJ,CA9BJ,CA8DI,oBAAC,GAAD,EACI,EAAE,CAAC,cADP,CAEI,MAAM,CAAC,eAFX,CAGI,MAAM,CAAE3C,SAAS,CAAC,CAAD,CAHrB,CAII,MAAM,CAAC,KAJX,EAMI,oBAAC,UAAD,EAAY,OAAO,CACf,wCACI,oBAAC,YAAD,MADJ,CADJ,EANJ,CA9DJ,CA2EI,oBAAC,GAAD,EACI,EAAE,CAAC,UADP,CAEI,MAAM,CAAC,uBAFX,CAGI,MAAM,CAAEA,SAAS,CAAC,CAAD,CAHrB,EAKI,oBAAC,UAAD,EAAY,OAAO,CACf,wCACI,oBAAC,MAAD,EACI,UAAU,CAAC,uBADf,CAEI,WAAW,CAAE,6BAAMG,CAAAA,QAAQ,CAAC6E,iBAAT,CAA2BnE,GAA3B,CAAN,EAFjB,EADJ,CADJ,EALJ,CA3EJ,CA8FI,oBAAC,GAAD,EACI,EAAE,CAAC,YADP,CAEI,MAAM,CAAC,qBAFX,CAGI,MAAM,CAAC,YAHX,CAII,MAAM,CAAC,QAJX,EAMI,oBAAC,UAAD,EAAY,OAAO,CACf,wCACI,kFADJ,CAEI,mDAFJ,CADJ,EANJ,CA9FJ,CADJ,CADJ,CAgHH,CAvPD,CAyPA,cAAeF,CAAAA,UAAf","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps, TSelectableTabs } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport ToggleButton from './ToogleButton';\r\nimport TabContent from './TabContent';\r\nimport { Feature, MapBrowserEvent } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport { activeToggleColor } from '../utils/MapStyles';\r\nimport Button from './Button';\r\nimport { geoserverWfsUrl, wfsTransaction, locationFeature, usedIcons, insertParameters, updateParameters, geoserverFetchUrl } from '../utils/MapConfig';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport LineString from 'ol/geom/LineString';\r\nimport Legend from './Legend';\r\nimport { Utils } from '../utils/Utils';\r\nimport MultiLineString from 'ol/geom/MultiLineString';\r\nimport Instructions from './Instructions';\r\nimport Home from './Home';\r\nimport Image from './Image';\r\nimport logo from '../img/rub_logo.png';\r\nimport Loading from './Loading';\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selected, setSelected] = useState<TSelectableTabs>('home');\r\n    const [toggleValue, setToggleValue] = useState(false);\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature());\r\n    const [transactionResponse, setTransactionResponse] = useState('');\r\n    const [trackResponse, setTrackResponse] = useState('');\r\n    const [token, setToken] = useState(localStorage.getItem('VgiUserToken'));\r\n\r\n    function hashUser() {\r\n        fetch('http://192.168.2.185:8000/hash')\r\n            .then(response => response.json())\r\n            .then(value => localStorage.setItem('VgiUserToken', value))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('VgiUserToken') === null) {\r\n            hashUser()\r\n        }\r\n        else { return }\r\n    }, [])\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n    function onToggleChange() {\r\n        setToggleValue(!toggleValue)\r\n        selectedFeature.set('visited', !toggleValue)\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (selectedFeature) {\r\n            setTransactionResponse('Updating')\r\n            if (selectedFeature.getId()) {\r\n                selectedFeature.unset('selected')\r\n                selectedFeature.getId();\r\n                selectedFeature.setGeometryName('geom');\r\n                selectedFeature.set('visited', toggleValue);\r\n                selectedFeature.set('edited_by', token);\r\n                let xmlString = new XMLSerializer().serializeToString(\r\n                    wfsTransaction.writeTransaction([], [selectedFeature], [], updateParameters)\r\n                )\r\n                let body = {\r\n                    xml: xmlString,\r\n                }\r\n                fetch(geoserverFetchUrl, {\r\n                    method: 'POST',\r\n                    body: JSON.stringify(body)\r\n                })\r\n                    .then(() => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`))\r\n                    .then(() => setTimeout(() => setTransactionResponse(''), 3000))\r\n                    .then(() => {\r\n                        //@ts-ignore\r\n                        const layer: VectorLayer = map!.getLayers().getArray()[1];\r\n                        layer.getSource().clear();\r\n                        layer.getSource().refresh();\r\n                    })\r\n                    .catch(error => console.log(error + 'Feature could not be updated.'));\r\n            }\r\n            else {\r\n                setTransactionResponse('No feature selected.')\r\n                setTimeout(() => setTransactionResponse(''), 3000);\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            setTransactionResponse('Feature could not be updated.')\r\n            setTimeout(() => setTransactionResponse(''), 3000);\r\n            return;\r\n        }\r\n    }\r\n\r\n    // const saveTrack = () => {\r\n    //     let linestring = locationFeature.getGeometry() as LineString;\r\n    //     if (linestring) {\r\n    //         const insertFeature = new Feature({\r\n    //             geom: new MultiLineString([linestring])\r\n    //         });\r\n    //         insertFeature.set('user', 'fabi')\r\n    //         let xmlString = new XMLSerializer().serializeToString(\r\n    //             wfsTransaction.writeTransaction([insertFeature], [], [], insertParameters)\r\n    //         )\r\n    //         MapUtils.removeLastLayer(map)\r\n    //         fetch(geoserverWfsUrl, {\r\n    //             method: 'POST',\r\n    //             mode: 'no-cors',\r\n    //             body: xmlString\r\n    //         })\r\n    //             .then(response => setTrackResponse(`Track inserted to database with timestamp ${Utils.getDate()}.`))\r\n    //             .then(() => {\r\n    //                 //@ts-ignore\r\n    //                 const layer: VectorLayer = map!.getLayers().getArray()[2];\r\n    //                 layer.getSource().clear();\r\n    //                 layer.getSource().refresh();\r\n    //             })\r\n    //             .then(() => setTimeout(() => setTrackResponse(''), 3000))\r\n    //             .catch(error => console.log(error + 'Error while saving data.'));\r\n    //     }\r\n    //     else {\r\n    //         setTrackResponse('No Track to save.');\r\n    //         setTimeout(() => setTrackResponse(''), 3000);\r\n    //         return;\r\n    //     }\r\n    // }\r\n\r\n    let prevSelected: Feature[] = []\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature | FeatureLike): void => {\r\n                    let castedFeature: Feature = feature as Feature;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Beschreibung'\r\n                    faIcon={usedIcons[0]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Home />\r\n                            <Button\r\n                                buttonText={`Informationen `}\r\n                                faIcon={usedIcons[1]}\r\n                                clickButton={() => setSelected('instructions')}\r\n                            />\r\n                            <Image\r\n                                altText='RUB-Logo'\r\n                                img={logo}\r\n                                link='https://www.geographie.ruhr-uni-bochum.de/forschung/geomatik/home-news/'\r\n                            />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='locations'\r\n                    header='Besuchte Gebäude'\r\n                    faIcon={usedIcons[2]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Legend\r\n                                title='Legende'\r\n                            />\r\n                            <ToggleButton\r\n                                id='toggleVisited'\r\n                                isOn={selectedFeature.get('visited')}\r\n                                isOnColor={activeToggleColor}\r\n                                handleToggle={onToggleChange}\r\n                            />\r\n                            {\r\n                                JSON.stringify(selectedFeature.get('visited'))\r\n                            }\r\n                            {\r\n                                transactionResponse !== 'Updating' ?\r\n                                    <Button\r\n                                        buttonText='Update'\r\n                                        response={transactionResponse}\r\n                                        clickButton={saveData}\r\n                                    />\r\n                                    :\r\n                                    <Loading />\r\n                            }\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='instructions'\r\n                    header='Informationen'\r\n                    faIcon={usedIcons[1]}\r\n                    anchor='top'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Instructions />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='tracking'\r\n                    header='Standort lokalisieren'\r\n                    faIcon={usedIcons[3]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Button\r\n                                buttonText='Standort lokalisieren'\r\n                                clickButton={() => MapUtils.createGeolocation(map)}\r\n                            />\r\n                            {/* <Button\r\n                                buttonText='Quit tracking'\r\n                                clickButton={saveTrack}\r\n                                response={trackResponse}\r\n                            /> */}\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='user-infos'\r\n                    header='Nutzerinformationen'\r\n                    faIcon='fa fa-user'\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <li>Nutzer Token entfernen lassen, selbst generieren?</li>\r\n                            <li>auf API hinweisen?</li>\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;"]},"metadata":{},"sourceType":"module"}