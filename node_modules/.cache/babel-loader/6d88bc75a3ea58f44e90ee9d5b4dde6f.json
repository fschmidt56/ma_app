{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Documents\\\\app\\\\src\\\\components\\\\MapSidebar.tsx\";\nimport React, { useState } from 'react';\nimport 'ol/ol.css';\nimport Sidebar from './Sidebar';\nimport Tab from './Tab';\nimport ToggleButton from './ToogleButton';\nimport TabContent from './TabContent';\nimport { Feature } from 'ol';\nimport { activeToggleColor } from '../utils/MapStyles';\nimport Button from './Button';\nimport { geoserverWfsUrl, transactionParameters, wfsTransaction, geoserverHeaders, trackFeature, usedIcons, insertParameters } from '../utils/MapConfig';\nimport { MapUtils } from '../utils/MapUtils';\nimport TwitterFeed from './TwitterFeed';\nimport Legend from './Legend';\nimport { Utils } from '../utils/Utils';\nconst mapListeners = [];\n\nconst MapSidebar = props => {\n  const {\n    map\n  } = props;\n  const [collapsed, setCollapsed] = useState(false);\n  const [selected, setSelected] = useState('home');\n  const [toggleValue, setToggleValue] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(new Feature());\n  const [transactionResponse, setTransactionResponse] = useState('');\n  const [trackResponse, setTrackResponse] = useState('');\n  const [open, setOpen] = useState(false);\n\n  function onClose() {\n    setCollapsed(true); //@ts-ignore\n\n    setSelected(undefined);\n  }\n\n  function onOpen(id) {\n    setCollapsed(false); //@ts-ignore\n\n    setSelected(id);\n  }\n\n  ;\n\n  function onToggleChange() {\n    setToggleValue(!toggleValue);\n    selectedFeature.set('visited', !toggleValue);\n  }\n\n  function showInstructions() {\n    setOpen(!open);\n  }\n\n  const saveData = () => {\n    if (selectedFeature) {\n      if (selectedFeature.getId()) {\n        selectedFeature.unset('selected');\n        selectedFeature.getId();\n        selectedFeature.setGeometryName('geom');\n        selectedFeature.set('visited', toggleValue);\n        let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([], [selectedFeature], [], transactionParameters));\n        fetch(geoserverWfsUrl, {\n          method: 'POST',\n          mode: 'no-cors',\n          headers: geoserverHeaders,\n          body: xmlString\n        }).then(response => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`)).then(() => {\n          //@ts-ignore\n          const layer = map.getLayers().getArray()[1];\n          layer.getSource().clear();\n          layer.getSource().refresh();\n        }).catch(error => console.log(error + 'Feature could not be updated.'));\n      } else {\n        setTransactionResponse('No feature selected.');\n        return;\n      }\n    } else {\n      setTransactionResponse('Feature could not be updated.');\n      return;\n    }\n  };\n\n  const saveTrack = () => {\n    let linestring = trackFeature.getGeometry();\n\n    if (linestring) {\n      trackFeature.getGeometry();\n      const today = Utils.getDate();\n      console.log(today);\n      trackFeature.set('date', null);\n      trackFeature.set('user', 'fabi');\n      console.log(trackFeature.getGeometryName());\n      let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([trackFeature], [], [], insertParameters));\n      console.log(xmlString);\n      fetch(geoserverWfsUrl, {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: geoserverHeaders,\n        body: xmlString\n      }).then(response => setTrackResponse(`Track inserted to database.`)).catch(error => console.log(error + 'Error while saving data.')); // }\n      // else {\n      //     setTrackResponse('No feature selected.')\n      //     return;\n      // }\n    } else {\n      setTrackResponse('No Track to save.');\n      return;\n    }\n  };\n\n  let prevSelected = [];\n\n  if (map) {\n    if (mapListeners.length === 0) {\n      const mapListener = map.on('click', function (e) {\n        map.forEachFeatureAtPixel(e.pixel, feature => {\n          let castedFeature = feature;\n          prevSelected.unshift(castedFeature);\n          setSelectedFeature(prevSelected[0]);\n          prevSelected[0].set('selected', true);\n\n          if (prevSelected.length > 1) {\n            prevSelected[1].set('selected', false);\n          }\n\n          prevSelected.splice(1);\n        });\n      });\n      mapListeners.push(mapListener);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Sidebar, {\n    id: \"sidebar\",\n    collapsed: collapsed,\n    selected: selected,\n    onClose: onClose //@ts-ignore\n    ,\n    doOpen: onOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 146\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    id: \"home\",\n    header: \"Home\",\n    faIcon: usedIcons[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 154\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"This is \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }, \"CoronaTracker\"), \". \", React.createElement(\"br\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 161\n      },\n      __self: this\n    }), \"If you are infected with Covid19 feel free to \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"share\"), \" important \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"spatial information\"), \" with us and other citizens - \", React.createElement(\"b\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }, \"anonymous & voluntary\"), \".\"), React.createElement(Button, {\n      buttonText: `Instructions `,\n      faIcon: usedIcons[1],\n      clickButton: () => setSelected('instructions'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 164\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 159\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"instructions\",\n    header: \"Instructions\",\n    faIcon: usedIcons[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 173\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Button, {\n      buttonText: `Set visited location `,\n      faIcon: open ? usedIcons[8] : usedIcons[7],\n      clickButton: showInstructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 180\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: open ? 'notCollapsedInst' : 'collapsedInst',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 185\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 186\n      },\n      __self: this\n    }, \"Tab/Click a building you have visited within two weeks before your diagnosis. A selected building gets a thick orange border.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }, \"Select \", React.createElement(\"i\", {\n      className: usedIcons[2],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 187\n      },\n      __self: this\n    }), \" from the menu. Set a visited builiding to true with the ToggleButton. \"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 188\n      },\n      __self: this\n    }, \"Click Update. The map view will refresh and the selected building will change its color.\")), React.createElement(Button, {\n      buttonText: `Track position... `,\n      faIcon: open ? usedIcons[8] : usedIcons[7],\n      clickButton: showInstructions,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 190\n      },\n      __self: this\n    }), React.createElement(\"div\", {\n      className: open ? 'notCollapsedInst' : 'collapsedInst',\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 195\n      },\n      __self: this\n    }, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }, \"Select \", React.createElement(\"i\", {\n      className: usedIcons[3],\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 196\n      },\n      __self: this\n    }), \" for tracking. You have to enable Geolocation to use this Feature.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }, \"Everytime your position changes, your track will be updated on the map.\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 198\n      },\n      __self: this\n    }, \"Click 'Quit Tracking' and your data will be send to the database.\"))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 178\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"locations\",\n    header: \"Set visited locations\",\n    faIcon: usedIcons[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Legend, {\n      title: \"Legende\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 212\n      },\n      __self: this\n    }), React.createElement(ToggleButton, {\n      id: \"toggleVisited\",\n      isOn: selectedFeature.get('visited'),\n      isOnColor: activeToggleColor,\n      handleToggle: onToggleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 215\n      },\n      __self: this\n    }), JSON.stringify(selectedFeature.get('visited')), React.createElement(Button, {\n      buttonText: \"Update\",\n      response: transactionResponse,\n      clickButton: saveData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 210\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"tracking\",\n    header: \"Tracking\",\n    faIcon: usedIcons[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Button, {\n      buttonText: \"Start tracking\",\n      clickButton: () => MapUtils.createGeolocation(map),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 239\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: \"Quit tracking\",\n      clickButton: saveTrack,\n      response: trackResponse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 237\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"twitter\",\n    header: \"Twitter\",\n    faIcon: usedIcons[4],\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(TwitterFeed, {\n      profileUrl: \"https://twitter.com/rki_de\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 258\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"tasks\",\n    header: \"ToDos\",\n    faIcon: \"fa fa-list\",\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 263\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 271\n      },\n      __self: this\n    }, \"turn geolocation off\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 272\n      },\n      __self: this\n    }, \"insert line features\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 273\n      },\n      __self: this\n    }, \"statistics user visited locations in bbox, length tracks\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 274\n      },\n      __self: this\n    }, \"toggle only selected instruction\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 275\n      },\n      __self: this\n    }, \"db field for last edit ?\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 269\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"settings\",\n    header: \"Settings\",\n    faIcon: usedIcons[5],\n    disabled: true,\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 279\n    },\n    __self: this\n  }), React.createElement(Tab, {\n    id: \"off\",\n    header: \"PowerOff\",\n    faIcon: usedIcons[6],\n    anchor: \"bottom\",\n    disabled: true,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 286\n    },\n    __self: this\n  })));\n};\n\nexport default MapSidebar;","map":{"version":3,"sources":["C:/Users/Fabi/Documents/app/src/components/MapSidebar.tsx"],"names":["React","useState","Sidebar","Tab","ToggleButton","TabContent","Feature","activeToggleColor","Button","geoserverWfsUrl","transactionParameters","wfsTransaction","geoserverHeaders","trackFeature","usedIcons","insertParameters","MapUtils","TwitterFeed","Legend","Utils","mapListeners","MapSidebar","props","map","collapsed","setCollapsed","selected","setSelected","toggleValue","setToggleValue","selectedFeature","setSelectedFeature","transactionResponse","setTransactionResponse","trackResponse","setTrackResponse","open","setOpen","onClose","undefined","onOpen","id","onToggleChange","set","showInstructions","saveData","getId","unset","setGeometryName","xmlString","XMLSerializer","serializeToString","writeTransaction","fetch","method","mode","headers","body","then","response","layer","getLayers","getArray","getSource","clear","refresh","catch","error","console","log","saveTrack","linestring","getGeometry","today","getDate","getGeometryName","prevSelected","length","mapListener","on","e","forEachFeatureAtPixel","pixel","feature","castedFeature","unshift","splice","push","get","JSON","stringify","createGeolocation"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps, selectableTabs } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport ToggleButton from './ToogleButton';\r\nimport TabContent from './TabContent';\r\nimport { Feature, MapBrowserEvent, Geolocation } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport { activeToggleColor } from '../utils/MapStyles';\r\nimport Button from './Button';\r\nimport { geoserverWfsUrl, transactionParameters, wfsTransaction, geoserverHeaders, trackFeature, usedIcons, insertParameters } from '../utils/MapConfig';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport LineString from 'ol/geom/LineString';\r\nimport TwitterFeed from './TwitterFeed';\r\nimport Legend from './Legend';\r\nimport { Utils } from '../utils/Utils';\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selected, setSelected] = useState<selectableTabs>('home');\r\n    const [toggleValue, setToggleValue] = useState(false);\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature());\r\n    const [transactionResponse, setTransactionResponse] = useState('');\r\n    const [trackResponse, setTrackResponse] = useState('');\r\n    const [open, setOpen] = useState(false);\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n    function onToggleChange() {\r\n        setToggleValue(!toggleValue)\r\n        selectedFeature.set('visited', !toggleValue)\r\n    }\r\n\r\n    function showInstructions() {\r\n        setOpen(!open)\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (selectedFeature) {\r\n            if (selectedFeature.getId()) {\r\n                selectedFeature.unset('selected')\r\n                selectedFeature.getId();\r\n                selectedFeature.setGeometryName('geom');\r\n                selectedFeature.set('visited', toggleValue)\r\n                let xmlString = new XMLSerializer().serializeToString(\r\n                    wfsTransaction.writeTransaction([], [selectedFeature], [], transactionParameters)\r\n                )\r\n                fetch(geoserverWfsUrl, {\r\n                    method: 'POST',\r\n                    mode: 'no-cors',\r\n                    headers: geoserverHeaders,\r\n                    body: xmlString\r\n                })\r\n                    .then(response => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`))\r\n                    .then(() => {\r\n                        //@ts-ignore\r\n                        const layer: VectorLayer = map!.getLayers().getArray()[1]\r\n                        layer.getSource().clear()\r\n                        layer.getSource().refresh()\r\n                    })\r\n                    .catch(error => console.log(error + 'Feature could not be updated.'));\r\n            }\r\n            else {\r\n                setTransactionResponse('No feature selected.')\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            setTransactionResponse('Feature could not be updated.')\r\n            return;\r\n        }\r\n    }\r\n\r\n    const saveTrack = () => {\r\n        let linestring = trackFeature.getGeometry() as LineString;\r\n        if (linestring) {\r\n            trackFeature.getGeometry()\r\n            const today = Utils.getDate();\r\n            console.log(today)\r\n            trackFeature.set('date', null);\r\n            trackFeature.set('user', 'fabi')\r\n            console.log(trackFeature.getGeometryName());\r\n            let xmlString = new XMLSerializer().serializeToString(\r\n                wfsTransaction.writeTransaction([trackFeature], [], [], insertParameters)\r\n            )\r\n            console.log(xmlString);\r\n\r\n            fetch(geoserverWfsUrl, {\r\n                method: 'POST',\r\n                mode: 'no-cors',\r\n                headers: geoserverHeaders,\r\n                body: xmlString\r\n            })\r\n                .then(response => setTrackResponse(`Track inserted to database.`))\r\n                .catch(error => console.log(error + 'Error while saving data.'));\r\n            // }\r\n            // else {\r\n            //     setTrackResponse('No feature selected.')\r\n            //     return;\r\n            // }\r\n        }\r\n        else {\r\n            setTrackResponse('No Track to save.')\r\n            return;\r\n        }\r\n    }\r\n\r\n    let prevSelected: Feature[] = []\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature | FeatureLike): void => {\r\n                    let castedFeature: Feature = feature as Feature;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Home'\r\n                    faIcon={usedIcons[0]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <p>This is <b>CoronaTracker</b>. <br></br>\r\n                                If you are infected with Covid19 feel free to <b>share</b> important <b>spatial information</b> with us and other citizens - <b>anonymous & voluntary</b>.\r\n                            </p>\r\n                            <Button\r\n                                buttonText={`Instructions `}\r\n                                faIcon={usedIcons[1]}\r\n                                clickButton={() => setSelected('instructions')}\r\n                            />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='instructions'\r\n                    header='Instructions'\r\n                    faIcon={usedIcons[1]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Button\r\n                                buttonText={`Set visited location `}\r\n                                faIcon={open ? usedIcons[8] : usedIcons[7]}\r\n                                clickButton={showInstructions}\r\n                            />\r\n                            <div className={open ? 'notCollapsedInst' : 'collapsedInst'}>\r\n                                <li >Tab/Click a building you have visited within two weeks before your diagnosis. A selected building gets a thick orange border.</li>\r\n                                <li>Select <i className={usedIcons[2]}></i> from the menu. Set a visited builiding to true with the ToggleButton. </li>\r\n                                <li>Click Update. The map view will refresh and the selected building will change its color.</li>\r\n                            </div>\r\n                            <Button\r\n                                buttonText={`Track position... `}\r\n                                faIcon={open ? usedIcons[8] : usedIcons[7]}\r\n                                clickButton={showInstructions}\r\n                            />\r\n                            <div className={open ? 'notCollapsedInst' : 'collapsedInst'}>\r\n                                <li>Select <i className={usedIcons[3]}></i> for tracking. You have to enable Geolocation to use this Feature.</li>\r\n                                <li>Everytime your position changes, your track will be updated on the map.</li>\r\n                                <li>Click 'Quit Tracking' and your data will be send to the database.</li>\r\n                            </div>\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n\r\n                <Tab\r\n                    id='locations'\r\n                    header='Set visited locations'\r\n                    faIcon={usedIcons[2]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Legend\r\n                                title='Legende'\r\n                            />\r\n                            <ToggleButton\r\n                                id='toggleVisited'\r\n                                isOn={selectedFeature.get('visited')}\r\n                                isOnColor={activeToggleColor}\r\n                                handleToggle={onToggleChange}\r\n                            />\r\n                            {\r\n                                JSON.stringify(selectedFeature.get('visited'))\r\n                            }\r\n                            <Button\r\n                                buttonText='Update'\r\n                                response={transactionResponse}\r\n                                clickButton={saveData}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='tracking'\r\n                    header='Tracking'\r\n                    faIcon={usedIcons[3]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Button\r\n                                buttonText='Start tracking'\r\n                                clickButton={() => MapUtils.createGeolocation(map)}\r\n                            />\r\n                            <Button\r\n                                buttonText='Quit tracking'\r\n                                clickButton={saveTrack}\r\n                                response={trackResponse}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='twitter'\r\n                    header='Twitter'\r\n                    faIcon={usedIcons[4]}\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <TwitterFeed\r\n                            profileUrl='https://twitter.com/rki_de'\r\n                        />\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='tasks'\r\n                    header='ToDos'\r\n                    faIcon='fa fa-list'\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <li>turn geolocation off</li>\r\n                            <li>insert line features</li>\r\n                            <li>statistics user visited locations in bbox, length tracks</li>\r\n                            <li>toggle only selected instruction</li>\r\n                            <li>db field for last edit ?</li>\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='settings'\r\n                    header='Settings'\r\n                    faIcon={usedIcons[5]}\r\n                    disabled={true}\r\n                    anchor='bottom'\r\n                />\r\n                <Tab\r\n                    id='off'\r\n                    header='PowerOff'\r\n                    faIcon={usedIcons[6]}\r\n                    anchor='bottom'\r\n                    disabled={true}\r\n                />\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;"]},"metadata":{},"sourceType":"module"}