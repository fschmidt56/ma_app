{"ast":null,"code":"import { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZSource from 'ol/source/XYZ';\nimport { baseLayerUrl, mapCenter, mapZoom, rotationStatus, geoserverWfsUrl } from './MapConfig';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nexport class MapUtils {\n  static createBaseLayer() {\n    const xyzURL = baseLayerUrl;\n    const baseSource = new XYZSource({\n      url: xyzURL\n    });\n    const baseLayer = new TileLayer({\n      source: baseSource\n    });\n    return baseLayer;\n  }\n\n  static createMap() {\n    const baseLayer = this.createBaseLayer();\n    const map = new Map({\n      target: 'map',\n      layers: [baseLayer],\n      view: new View({\n        center: mapCenter,\n        zoom: mapZoom,\n        enableRotation: rotationStatus\n      })\n    });\n    return map;\n  }\n\n  static createSource(typename) {\n    const source = new VectorSource({\n      format: new GeoJSON(),\n      url: function (extent) {\n        return `${geoserverWfsUrl}\n                &request=GetFeature&typename=${typename}\n                &outputFormat=application/json\n                &srsname=EPSG:3857&bbox=${extent.join(',')},EPSG:3857`;\n      },\n      strategy: bboxStrategy\n    });\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Fabi/Documents/app/src/utils/MapUtils.tsx"],"names":["Map","View","TileLayer","XYZSource","baseLayerUrl","mapCenter","mapZoom","rotationStatus","geoserverWfsUrl","VectorSource","GeoJSON","bbox","bboxStrategy","MapUtils","createBaseLayer","xyzURL","baseSource","url","baseLayer","source","createMap","map","target","layers","view","center","zoom","enableRotation","createSource","typename","format","extent","join","strategy"],"mappings":"AACA,SAASA,GAAT,EAAcC,IAAd,QAA0B,IAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,cAA3C,EAA2DC,eAA3D,QAAkF,aAAlF;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAI,IAAIC,YAAjB,QAAqC,oBAArC;AAEA,OAAO,MAAMC,QAAN,CAAe;AAClB,SAAOC,eAAP,GAAyB;AACrB,UAAMC,MAAc,GAAGX,YAAvB;AACA,UAAMY,UAAqB,GAAG,IAAIb,SAAJ,CAAc;AACxCc,MAAAA,GAAG,EAAEF;AADmC,KAAd,CAA9B;AAGA,UAAMG,SAAoB,GAAG,IAAIhB,SAAJ,CAAc;AACvCiB,MAAAA,MAAM,EAAEH;AAD+B,KAAd,CAA7B;AAIA,WAAOE,SAAP;AACH;;AAED,SAAOE,SAAP,GAAmB;AACf,UAAMF,SAAoB,GAAG,KAAKJ,eAAL,EAA7B;AACA,UAAMO,GAAQ,GAAG,IAAIrB,GAAJ,CAAQ;AACrBsB,MAAAA,MAAM,EAAE,KADa;AAErBC,MAAAA,MAAM,EAAE,CAACL,SAAD,CAFa;AAGrBM,MAAAA,IAAI,EAAE,IAAIvB,IAAJ,CAAS;AACXwB,QAAAA,MAAM,EAAEpB,SADG;AAEXqB,QAAAA,IAAI,EAAEpB,OAFK;AAGXqB,QAAAA,cAAc,EAAEpB;AAHL,OAAT;AAHe,KAAR,CAAjB;AASA,WAAOc,GAAP;AACH;;AAED,SAAOO,YAAP,CAAoBC,QAApB,EAAsC;AAClC,UAAMV,MAAoB,GAAG,IAAIV,YAAJ,CAAiB;AAC1CqB,MAAAA,MAAM,EAAE,IAAIpB,OAAJ,EADkC;AAE1CO,MAAAA,GAAG,EAAE,UAAUc,MAAV,EAA4B;AAC/B,eAAQ,GAAEvB,eAAgB;+CACOqB,QAAS;;0CAEdE,MAAM,CAACC,IAAP,CAAY,GAAZ,CAAiB,YAH7C;AAID,OAPyC;AAQ1CC,MAAAA,QAAQ,EAAErB;AARgC,KAAjB,CAA7B;AAUH;;AAtCiB","sourcesContent":["\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZSource from 'ol/source/XYZ';\r\nimport { baseLayerUrl, mapCenter, mapZoom, rotationStatus, geoserverWfsUrl } from './MapConfig';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\r\n\r\nexport class MapUtils {\r\n    static createBaseLayer() {\r\n        const xyzURL: string = baseLayerUrl;\r\n        const baseSource: XYZSource = new XYZSource({\r\n            url: xyzURL\r\n        });\r\n        const baseLayer: TileLayer = new TileLayer({\r\n            source: baseSource\r\n        });\r\n\r\n        return baseLayer;\r\n    }\r\n\r\n    static createMap() {\r\n        const baseLayer: TileLayer = this.createBaseLayer();\r\n        const map: Map = new Map({\r\n            target: 'map',\r\n            layers: [baseLayer],\r\n            view: new View({\r\n                center: mapCenter,\r\n                zoom: mapZoom,\r\n                enableRotation: rotationStatus,\r\n            })\r\n        });\r\n        return map;\r\n    }\r\n\r\n    static createSource(typename: string) {\r\n        const source: VectorSource = new VectorSource({\r\n            format: new GeoJSON(),\r\n            url: function (extent: number[]) {\r\n              return `${geoserverWfsUrl}\r\n                &request=GetFeature&typename=${typename}\r\n                &outputFormat=application/json\r\n                &srsname=EPSG:3857&bbox=${extent.join(',')},EPSG:3857`;\r\n            },\r\n            strategy: bboxStrategy,\r\n          });\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}