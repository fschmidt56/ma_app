{"ast":null,"code":"import { Map, View } from 'ol';\nimport TileLayer from 'ol/layer/Tile';\nimport XYZSource from 'ol/source/XYZ';\nimport { baseLayerUrl, mapCenter, mapZoom, rotationStatus, geoserverWfsUrl, maxZoom, minZoom } from './MapConfig';\nimport VectorSource from 'ol/source/Vector';\nimport GeoJSON from 'ol/format/GeoJSON';\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\nimport VectorLayer from 'ol/layer/Vector';\nimport Select from 'ol/interaction/Select';\nexport class MapUtils {\n  static createBaseLayer() {\n    const xyzURL = baseLayerUrl;\n    const baseSource = new XYZSource({\n      url: xyzURL\n    });\n    const baseLayer = new TileLayer({\n      source: baseSource\n    });\n    return baseLayer;\n  }\n\n  static createMap() {\n    const baseLayer = this.createBaseLayer();\n    const map = new Map({\n      target: 'map',\n      layers: [baseLayer],\n      view: new View({\n        center: mapCenter,\n        zoom: mapZoom,\n        maxZoom: maxZoom,\n        minZoom: minZoom,\n        enableRotation: rotationStatus\n      })\n    });\n    return map;\n  } //creates a vector source based on a publised geoserver layer\n\n\n  static createSource(typename) {\n    const source = new VectorSource({\n      format: new GeoJSON(),\n      url: function (extent) {\n        return `${geoserverWfsUrl}\n                &request=GetFeature&typename=${typename}\n                &outputFormat=application/json\n                &srsname=EPSG:3857&bbox=${extent.join(',')},EPSG:3857`;\n      },\n      strategy: bboxStrategy\n    });\n    return source;\n  } //creates a vector layer based on a vector source from a published geoserver layer\n\n\n  static createVector(typename) {\n    const vectorSource = this.createSource(typename);\n    const vectorLayer = new VectorLayer({\n      source: vectorSource,\n      extent: vectorSource.getExtent()\n    });\n    return vectorLayer;\n  }\n\n  static createSelect() {\n    const select = new Select({\n      style: selected\n    });\n    return select;\n  }\n\n}","map":{"version":3,"sources":["C:/Users/Fabi/Documents/app/src/utils/MapUtils.tsx"],"names":["Map","View","TileLayer","XYZSource","baseLayerUrl","mapCenter","mapZoom","rotationStatus","geoserverWfsUrl","maxZoom","minZoom","VectorSource","GeoJSON","bbox","bboxStrategy","VectorLayer","Select","MapUtils","createBaseLayer","xyzURL","baseSource","url","baseLayer","source","createMap","map","target","layers","view","center","zoom","enableRotation","createSource","typename","format","extent","join","strategy","createVector","vectorSource","vectorLayer","getExtent","createSelect","select","style","selected"],"mappings":"AACA,SAASA,GAAT,EAAcC,IAAd,QAA0B,IAA1B;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,OAAOC,SAAP,MAAsB,eAAtB;AACA,SAASC,YAAT,EAAuBC,SAAvB,EAAkCC,OAAlC,EAA2CC,cAA3C,EAA2DC,eAA3D,EAA4EC,OAA5E,EAAqFC,OAArF,QAAoG,aAApG;AACA,OAAOC,YAAP,MAAyB,kBAAzB;AACA,OAAOC,OAAP,MAAoB,mBAApB;AACA,SAASC,IAAI,IAAIC,YAAjB,QAAqC,oBAArC;AACA,OAAOC,WAAP,MAAwB,iBAAxB;AACA,OAAOC,MAAP,MAAmB,uBAAnB;AAEA,OAAO,MAAMC,QAAN,CAAe;AAClB,SAAOC,eAAP,GAAyB;AACrB,UAAMC,MAAc,GAAGf,YAAvB;AACA,UAAMgB,UAAqB,GAAG,IAAIjB,SAAJ,CAAc;AACxCkB,MAAAA,GAAG,EAAEF;AADmC,KAAd,CAA9B;AAGA,UAAMG,SAAoB,GAAG,IAAIpB,SAAJ,CAAc;AACvCqB,MAAAA,MAAM,EAAEH;AAD+B,KAAd,CAA7B;AAIA,WAAOE,SAAP;AACH;;AAED,SAAOE,SAAP,GAAmB;AACf,UAAMF,SAAoB,GAAG,KAAKJ,eAAL,EAA7B;AACA,UAAMO,GAAQ,GAAG,IAAIzB,GAAJ,CAAQ;AACrB0B,MAAAA,MAAM,EAAE,KADa;AAErBC,MAAAA,MAAM,EAAE,CAACL,SAAD,CAFa;AAGrBM,MAAAA,IAAI,EAAE,IAAI3B,IAAJ,CAAS;AACX4B,QAAAA,MAAM,EAAExB,SADG;AAEXyB,QAAAA,IAAI,EAAExB,OAFK;AAGXG,QAAAA,OAAO,EAAEA,OAHE;AAIXC,QAAAA,OAAO,EAAEA,OAJE;AAKXqB,QAAAA,cAAc,EAAExB;AALL,OAAT;AAHe,KAAR,CAAjB;AAWA,WAAOkB,GAAP;AACH,GA3BiB,CA4BlB;;;AACA,SAAOO,YAAP,CAAoBC,QAApB,EAAsC;AAClC,UAAMV,MAAoB,GAAG,IAAIZ,YAAJ,CAAiB;AAC1CuB,MAAAA,MAAM,EAAE,IAAItB,OAAJ,EADkC;AAE1CS,MAAAA,GAAG,EAAE,UAAUc,MAAV,EAA4B;AAC7B,eAAQ,GAAE3B,eAAgB;+CACKyB,QAAS;;0CAEdE,MAAM,CAACC,IAAP,CAAY,GAAZ,CAAiB,YAH3C;AAIH,OAPyC;AAQ1CC,MAAAA,QAAQ,EAAEvB;AARgC,KAAjB,CAA7B;AAUA,WAAOS,MAAP;AACH,GAzCiB,CA0ClB;;;AACA,SAAOe,YAAP,CAAoBL,QAApB,EAAsC;AAClC,UAAMM,YAA0B,GAAG,KAAKP,YAAL,CAAkBC,QAAlB,CAAnC;AACA,UAAMO,WAAwB,GAAG,IAAIzB,WAAJ,CAAgB;AAC7CQ,MAAAA,MAAM,EAAEgB,YADqC;AAE7CJ,MAAAA,MAAM,EAAEI,YAAY,CAACE,SAAb;AAFqC,KAAhB,CAAjC;AAIA,WAAOD,WAAP;AACH;;AAED,SAAOE,YAAP,GAAsB;AAClB,UAAMC,MAAc,GAAG,IAAI3B,MAAJ,CAAW;AAC9B4B,MAAAA,KAAK,EAAEC;AADuB,KAAX,CAAvB;AAGA,WAAOF,MAAP;AACH;;AAzDiB","sourcesContent":["\r\nimport { Map, View } from 'ol';\r\nimport TileLayer from 'ol/layer/Tile';\r\nimport XYZSource from 'ol/source/XYZ';\r\nimport { baseLayerUrl, mapCenter, mapZoom, rotationStatus, geoserverWfsUrl, maxZoom, minZoom } from './MapConfig';\r\nimport VectorSource from 'ol/source/Vector';\r\nimport GeoJSON from 'ol/format/GeoJSON';\r\nimport { bbox as bboxStrategy } from 'ol/loadingstrategy';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport Select from 'ol/interaction/Select';\r\n\r\nexport class MapUtils {\r\n    static createBaseLayer() {\r\n        const xyzURL: string = baseLayerUrl;\r\n        const baseSource: XYZSource = new XYZSource({\r\n            url: xyzURL\r\n        });\r\n        const baseLayer: TileLayer = new TileLayer({\r\n            source: baseSource\r\n        });\r\n\r\n        return baseLayer;\r\n    }\r\n\r\n    static createMap() {\r\n        const baseLayer: TileLayer = this.createBaseLayer();\r\n        const map: Map = new Map({\r\n            target: 'map',\r\n            layers: [baseLayer],\r\n            view: new View({\r\n                center: mapCenter,\r\n                zoom: mapZoom,\r\n                maxZoom: maxZoom,\r\n                minZoom: minZoom,\r\n                enableRotation: rotationStatus,\r\n            })\r\n        });\r\n        return map;\r\n    }\r\n    //creates a vector source based on a publised geoserver layer\r\n    static createSource(typename: string) {\r\n        const source: VectorSource = new VectorSource({\r\n            format: new GeoJSON(),\r\n            url: function (extent: number[]) {\r\n                return `${geoserverWfsUrl}\r\n                &request=GetFeature&typename=${typename}\r\n                &outputFormat=application/json\r\n                &srsname=EPSG:3857&bbox=${extent.join(',')},EPSG:3857`;\r\n            },\r\n            strategy: bboxStrategy,\r\n        });\r\n        return source;\r\n    }\r\n    //creates a vector layer based on a vector source from a published geoserver layer\r\n    static createVector(typename: string) {\r\n        const vectorSource: VectorSource = this.createSource(typename);\r\n        const vectorLayer: VectorLayer = new VectorLayer({\r\n            source: vectorSource,\r\n            extent: vectorSource.getExtent(),\r\n        });\r\n        return vectorLayer;\r\n    }\r\n\r\n    static createSelect() {\r\n        const select: Select = new Select({\r\n            style: selected\r\n        });\r\n        return select;\r\n    }\r\n}"]},"metadata":{},"sourceType":"module"}