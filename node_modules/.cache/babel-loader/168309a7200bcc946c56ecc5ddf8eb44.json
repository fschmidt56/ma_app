{"ast":null,"code":"import _regeneratorRuntime from\"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4_Semester\\\\MA\\\\WebGIS\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";import _asyncToGenerator from\"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4_Semester\\\\MA\\\\WebGIS\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4_Semester\\\\MA\\\\WebGIS\\\\app\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";import React,{useState}from'react';import Button from'./Button';import{usedIcons}from'../utils/MapConfig';var Instructions=function Instructions(props){var token=props.token,handleToken=props.handleToken;var _useState=useState([false,true]),_useState2=_slicedToArray(_useState,2),open=_useState2[0],setOpen=_useState2[1];function hashUser(){return _hashUser.apply(this,arguments);}function _hashUser(){_hashUser=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:fetch('http://192.168.2.185:8000/hash').then(function(response){return response.json();}).then(function(value){localStorage.setItem('VgiUserToken',value);handleToken(value);});case 1:case\"end\":return _context.stop();}}},_callee);}));return _hashUser.apply(this,arguments);}function removeToken(){return _removeToken.apply(this,arguments);}function _removeToken(){_removeToken=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:localStorage.removeItem('VgiUserToken');handleToken(null);case 2:case\"end\":return _context2.stop();}}},_callee2);}));return _removeToken.apply(this,arguments);}return React.createElement(React.Fragment,null,React.createElement(\"div\",null,React.createElement(Button,{buttonText:\"Besuchte Orte markieren \",faIcon:open[0]?usedIcons[8]:usedIcons[7],clickButton:function clickButton(){return setOpen([!open[0],open[1]]);}}),React.createElement(\"div\",{className:open[0]?'notCollapsedInst':'collapsedInst'},React.createElement(\"li\",null,\"Zoome in die Karte hinein. Es erscheinen Hausumringe von allen Geb\\xE4uden im Stadtgebiet.\"),React.createElement(\"li\",null,\"Wenn du an Corona erkrankt bist/warst, kannst du per Klick ein Geb\\xE4ude selektieren in dem du dich kurz vor deiner Diagnose aufgehalten hast.\"),React.createElement(\"li\",null,\"W\\xE4hle dann \",React.createElement(\"i\",{className:usedIcons[2]}),\" vom Men\\xFC links. \\xDCber den dortigen Button kannst du den Status des gew\\xE4hlten Geb\\xE4udes festlegen (true | besucht & false | nicht besucht).\"),React.createElement(\"li\",null,\"\\xDCber den Update Button sendest du deinen gew\\xE4hlten Status an die Datenbank.\"),React.createElement(\"li\",null,\"Du kannst frei entscheiden zu welchen Geb\\xE4uden du Informationen teilen m\\xF6chtest. Es ist f\\xFCr uns und andere nicht ersichtlich welche Geb\\xE4ude du editierst. Die Daten werden direkt bei der Erfassung aggregiert.\")),React.createElement(Button,{buttonText:\"Datenschutz \",faIcon:open[1]?usedIcons[8]:usedIcons[7],clickButton:function clickButton(){return setOpen([open[0],!open[1]]);}}),React.createElement(\"div\",{className:open[1]?'notCollapsedInst':'collapsedInst'},React.createElement(\"li\",null,\"Bei der Datenerhebung werden keine nutzerspezifischen Daten erfasst. Jedem User wird ein zuf\\xE4llig generiertes Pseudonym in Form eines Tokens zugeordnet. Eine Registrierung ist nicht erforderlich. Die Daten werden nach Abschluss des Projektes gel\\xF6scht.\"),React.createElement(\"li\",null,\"Bei einem Update eines Geb\\xE4udes sendest du nur den gew\\xE4hlten Status von diesem. Gleichzeitig wird der Zeitpunkt der letzten Aktualisierung in der Datenbank gespeichert sowie das Pseudonym des Nutzers. Letzteres wird getrennt vom jeweiligen Geb\\xE4udedatensatz abgespeichert, sodass nicht nachvollzogen werden kann welches Geb\\xE4ude du editiert hast.\"),React.createElement(\"li\",null,\"Die hier erfassten Daten d\\xFCrfen nicht kommerziell oder f\\xFCr andere Zwecke genutzt werden. Sie dienen ausschlie\\xDFlich dem wissenschaftlichen Erkenntnisinteresse dieser Arbeit.\"),React.createElement(\"li\",null,\"Die dargestellten Hausumringe basieren auf einem Datensatz der \",React.createElement(\"a\",{target:\"_blank\",href:\"https://www.bezreg-koeln.nrw.de/brk_internet/geobasis/liegenschaftskataster/hausumringe/index.html\"},\" Bezirksregierung K\\xF6ln\"),\".\"),React.createElement(\"li\",null,\"Falls du nicht m\\xF6chtest, dass nachvollzogen werden kann wie viele Datens\\xE4tze von dir editiert worden sind, kannst du dein Pseudonym nach jeder \\xC4nderung erneuern.\"),React.createElement(\"li\",null,\"Falls du komplett anonym Daten beitragen m\\xF6chtest, kannst du \\xFCber den Button unten jederzeit dein Pseudonym entfernen.\")),React.createElement(Button,{buttonText:\"Token erneuern \",faIcon:\"\".concat(usedIcons[9]),clickButton:function clickButton(){return hashUser();}}),token===null?React.createElement(\"p\",null,\"Ich m\\xF6chte anonym Daten beitragen.\"):React.createElement(\"p\",null,\"Ich erkl\\xE4re mich einverstanden, dass mein Pseudonym f\\xFCr das wissenschaftliche Erkenntnisinteresse dieser Arbeit gespeichert wird. Es darf f\\xFCr keine anderen Zwecke verwendet werden. Erste 10 Zeichen des Tokens:\",React.createElement(\"b\",null,\" \",token.substring(0,10))),React.createElement(Button,{buttonText:\"Token entfernen \",faIcon:\"\".concat(usedIcons[10]),clickButton:function clickButton(){return removeToken();}})));};export default Instructions;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4_Semester/MA/WebGIS/app/src/components/Instructions.tsx"],"names":["React","useState","Button","usedIcons","Instructions","props","token","handleToken","open","setOpen","hashUser","fetch","then","response","json","value","localStorage","setItem","removeToken","removeItem","substring"],"mappings":"ujBAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAA2C,OAA3C,CAEA,MAAOC,CAAAA,MAAP,KAAmB,UAAnB,CACA,OAASC,SAAT,KAA0B,oBAA1B,CAGA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,KAAD,CAA8B,IACvCC,CAAAA,KADuC,CAChBD,KADgB,CACvCC,KADuC,CAChCC,WADgC,CAChBF,KADgB,CAChCE,WADgC,eAEvBN,QAAQ,CAAC,CAAC,KAAD,CAAQ,IAAR,CAAD,CAFe,wCAExCO,IAFwC,eAElCC,OAFkC,uBAIhCC,CAAAA,QAJgC,kIAI/C,mIACIC,KAAK,CAAC,gCAAD,CAAL,CACKC,IADL,CACU,SAAAC,QAAQ,QAAIA,CAAAA,QAAQ,CAACC,IAAT,EAAJ,EADlB,EAEKF,IAFL,CAEU,SAAAG,KAAK,CAAI,CACXC,YAAY,CAACC,OAAb,CAAqB,cAArB,CAAqCF,KAArC,EACAR,WAAW,CAAEQ,KAAF,CAAX,CACH,CALL,EADJ,sDAJ+C,mDAchCG,CAAAA,WAdgC,2IAc/C,wIACIF,YAAY,CAACG,UAAb,CAAwB,cAAxB,EACAZ,WAAW,CAAE,IAAF,CAAX,CAFJ,wDAd+C,8CAmB/C,MACI,yCACI,+BACI,oBAAC,MAAD,EACI,UAAU,2BADd,CAEI,MAAM,CAAEC,IAAI,CAAC,CAAD,CAAJ,CAAUL,SAAS,CAAC,CAAD,CAAnB,CAAyBA,SAAS,CAAC,CAAD,CAF9C,CAGI,WAAW,CAAE,6BAAMM,CAAAA,OAAO,CAAC,CAAC,CAACD,IAAI,CAAC,CAAD,CAAN,CAAWA,IAAI,CAAC,CAAD,CAAf,CAAD,CAAb,EAHjB,EADJ,CAMI,2BAAK,SAAS,CAAEA,IAAI,CAAC,CAAD,CAAJ,CAAU,kBAAV,CAA+B,eAA/C,EACI,2HADJ,CAEI,gLAFJ,CAGI,+CAAe,yBAAG,SAAS,CAAEL,SAAS,CAAC,CAAD,CAAvB,EAAf,yJAHJ,CAII,kHAJJ,CAKI,4PALJ,CANJ,CAaI,oBAAC,MAAD,EACI,UAAU,eADd,CAEI,MAAM,CAAEK,IAAI,CAAC,CAAD,CAAJ,CAAUL,SAAS,CAAC,CAAD,CAAnB,CAAyBA,SAAS,CAAC,CAAD,CAF9C,CAGI,WAAW,CAAE,6BAAMM,CAAAA,OAAO,CAAC,CAACD,IAAI,CAAC,CAAD,CAAL,CAAU,CAACA,IAAI,CAAC,CAAD,CAAf,CAAD,CAAb,EAHjB,EAbJ,CAkBI,2BAAK,SAAS,CAAEA,IAAI,CAAC,CAAD,CAAJ,CAAU,kBAAV,CAA+B,eAA/C,EACI,kSADJ,CAEI,qYAFJ,CAGI,sNAHJ,CAII,gGAAmE,yBAAG,MAAM,CAAC,QAAV,CAAmB,IAAI,CAAC,oGAAxB,8BAAnE,KAJJ,CAKI,2MALJ,CAMI,6JANJ,CAlBJ,CA0BI,oBAAC,MAAD,EACI,UAAU,kBADd,CAEI,MAAM,WAAKL,SAAS,CAAC,CAAD,CAAd,CAFV,CAGI,WAAW,CAAE,6BAAMO,CAAAA,QAAQ,EAAd,EAHjB,EA1BJ,CAgCQJ,KAAK,GAAK,IAAV,CACI,qEADJ,CAGI,0PAAoN,iCAAKA,KAAK,CAAEc,SAAP,CAAiB,CAAjB,CAAoB,EAApB,CAAL,CAApN,CAnCZ,CAsCI,oBAAC,MAAD,EACI,UAAU,mBADd,CAEI,MAAM,WAAKjB,SAAS,CAAC,EAAD,CAAd,CAFV,CAGI,WAAW,CAAE,6BAAMe,CAAAA,WAAW,EAAjB,EAHjB,EAtCJ,CADJ,CADJ,CAiDH,CApED,CAsEA,cAAed,CAAAA,YAAf","sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport { IInstructionProps } from '../types/types';\r\nimport Button from './Button';\r\nimport { usedIcons } from '../utils/MapConfig';\r\n\r\n\r\nconst Instructions = (props: IInstructionProps) => {\r\n    const { token, handleToken } = props\r\n    const [open, setOpen] = useState([false, true]);\r\n\r\n    async function hashUser() {\r\n        fetch('http://192.168.2.185:8000/hash')\r\n            .then(response => response.json())\r\n            .then(value => {\r\n                localStorage.setItem('VgiUserToken', value)\r\n                handleToken!(value)\r\n            })\r\n\r\n    }\r\n\r\n    async function removeToken() {\r\n        localStorage.removeItem('VgiUserToken')\r\n        handleToken!(null)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div>\r\n                <Button\r\n                    buttonText={`Besuchte Orte markieren `}\r\n                    faIcon={open[0] ? usedIcons[8] : usedIcons[7]}\r\n                    clickButton={() => setOpen([!open[0], open[1]])}\r\n                />\r\n                <div className={open[0] ? 'notCollapsedInst' : 'collapsedInst'}>\r\n                    <li>Zoome in die Karte hinein. Es erscheinen Hausumringe von allen Gebäuden im Stadtgebiet.</li>\r\n                    <li>Wenn du an Corona erkrankt bist/warst, kannst du per Klick ein Gebäude selektieren in dem du dich kurz vor deiner Diagnose aufgehalten hast.</li>\r\n                    <li>Wähle dann <i className={usedIcons[2]}></i> vom Menü links. Über den dortigen Button kannst du den Status des gewählten Gebäudes festlegen (true | besucht & false | nicht besucht).</li>\r\n                    <li>Über den Update Button sendest du deinen gewählten Status an die Datenbank.</li>\r\n                    <li>Du kannst frei entscheiden zu welchen Gebäuden du Informationen teilen möchtest. Es ist für uns und andere nicht ersichtlich welche Gebäude du editierst. Die Daten werden direkt bei der Erfassung aggregiert.</li>\r\n                </div>\r\n                <Button\r\n                    buttonText={`Datenschutz `}\r\n                    faIcon={open[1] ? usedIcons[8] : usedIcons[7]}\r\n                    clickButton={() => setOpen([open[0], !open[1]])}\r\n                />\r\n                <div className={open[1] ? 'notCollapsedInst' : 'collapsedInst'}>\r\n                    <li>Bei der Datenerhebung werden keine nutzerspezifischen Daten erfasst. Jedem User wird ein zufällig generiertes Pseudonym in Form eines Tokens zugeordnet. Eine Registrierung ist nicht erforderlich. Die Daten werden nach Abschluss des Projektes gelöscht.</li>\r\n                    <li>Bei einem Update eines Gebäudes sendest du nur den gewählten Status von diesem. Gleichzeitig wird der Zeitpunkt der letzten Aktualisierung in der Datenbank gespeichert sowie das Pseudonym des Nutzers. Letzteres wird getrennt vom jeweiligen Gebäudedatensatz abgespeichert, sodass nicht nachvollzogen werden kann welches Gebäude du editiert hast.</li>\r\n                    <li>Die hier erfassten Daten dürfen nicht kommerziell oder für andere Zwecke genutzt werden. Sie dienen ausschließlich dem wissenschaftlichen Erkenntnisinteresse dieser Arbeit.</li>\r\n                    <li>Die dargestellten Hausumringe basieren auf einem Datensatz der <a target='_blank' href='https://www.bezreg-koeln.nrw.de/brk_internet/geobasis/liegenschaftskataster/hausumringe/index.html'> Bezirksregierung Köln</a>.</li>\r\n                    <li>Falls du nicht möchtest, dass nachvollzogen werden kann wie viele Datensätze von dir editiert worden sind, kannst du dein Pseudonym nach jeder Änderung erneuern.</li>\r\n                    <li>Falls du komplett anonym Daten beitragen möchtest, kannst du über den Button unten jederzeit dein Pseudonym entfernen.</li>\r\n                </div>\r\n                <Button\r\n                    buttonText={`Token erneuern `}\r\n                    faIcon={`${usedIcons[9]}`}\r\n                    clickButton={() => hashUser()}\r\n                />\r\n                {\r\n                    token === null ?\r\n                        <p>Ich möchte anonym Daten beitragen.</p>\r\n                        :\r\n                        <p>Ich erkläre mich einverstanden, dass mein Pseudonym für das wissenschaftliche Erkenntnisinteresse dieser Arbeit gespeichert wird. Es darf für keine anderen Zwecke verwendet werden. Erste 10 Zeichen des Tokens:<b> {token!.substring(0, 10)}</b></p>\r\n\r\n                }\r\n                <Button\r\n                    buttonText={`Token entfernen `}\r\n                    faIcon={`${usedIcons[10]}`}\r\n                    clickButton={() => removeToken()}\r\n                />\r\n\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Instructions;\r\n"]},"metadata":{},"sourceType":"module"}