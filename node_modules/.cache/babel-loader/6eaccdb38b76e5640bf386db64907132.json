{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Documents\\\\app\\\\src\\\\components\\\\MapSidebar.tsx\";\nimport React, { useState } from 'react';\nimport 'ol/ol.css';\nimport Sidebar from './Sidebar';\nimport Tab from './Tab';\nimport ToggleButton from './ToogleButton';\nimport TabContent from './TabContent';\nimport { Feature } from 'ol';\nconst mapListeners = [];\n\nconst MapSidebar = props => {\n  const {\n    map\n  } = props;\n  const [collapsed, setCollapsed] = useState(true);\n  const [selected, setSelected] = useState(undefined);\n  const [toggleValue, setToggleValue] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(new Feature());\n\n  function onClose() {\n    setCollapsed(true); //@ts-ignore\n\n    setSelected(undefined);\n  }\n\n  function onOpen(id) {\n    setCollapsed(false); //@ts-ignore\n\n    setSelected(id);\n  }\n\n  ;\n\n  function onToggleChange() {\n    setToggleValue(!toggleValue);\n  }\n\n  let prevSelected = [];\n\n  if (map) {\n    if (mapListeners.length === 0) {\n      const mapListener = map.on('click', function (e) {\n        map.forEachFeatureAtPixel(e.pixel, feature => {\n          let castedFeature = feature;\n          prevSelected.unshift(castedFeature);\n          setSelectedFeature(prevSelected[0]);\n          prevSelected[0].set('selected', true);\n\n          if (prevSelected.length > 1) {\n            prevSelected[1].set('selected', false);\n          }\n\n          prevSelected.splice(1);\n        });\n      });\n      mapListeners.push(mapListener);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Sidebar, {\n    id: \"sidebar\",\n    collapsed: collapsed,\n    selected: selected,\n    onClose: onClose //@ts-ignore\n    ,\n    doOpen: onOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 60\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    id: \"home\",\n    header: \"Home\",\n    faIcon: \"fa fa-bars\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 68\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(\"p\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 74\n      },\n      __self: this\n    }, \"This is Home.\"),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 73\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"database\",\n    header: \"Database\",\n    faIcon: \"fa fa-database\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77\n    },\n    __self: this\n  }), React.createElement(Tab, {\n    id: \"locations\",\n    header: \"Set visited locations\",\n    faIcon: \"fa fa-mouse-pointer\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 82\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(ToggleButton, {\n      id: \"toggleVisited\",\n      isOn: toggleValue,\n      isOnColor: \"rgba(55,156,214,1)\",\n      handleToggle: onToggleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 89\n      },\n      __self: this\n    }), selectedFeature.get('visited')),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 87\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"settings\",\n    header: \"Settings\",\n    faIcon: \"fa fa-cogs\",\n    disabled: true,\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 99\n    },\n    __self: this\n  }), React.createElement(Tab, {\n    id: \"off\",\n    header: \"PowerOff\",\n    faIcon: \"fa fa-power-off\",\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 105\n    },\n    __self: this\n  })));\n};\n\nexport default MapSidebar;","map":{"version":3,"sources":["C:/Users/Fabi/Documents/app/src/components/MapSidebar.tsx"],"names":["React","useState","Sidebar","Tab","ToggleButton","TabContent","Feature","mapListeners","MapSidebar","props","map","collapsed","setCollapsed","selected","setSelected","undefined","toggleValue","setToggleValue","selectedFeature","setSelectedFeature","onClose","onOpen","id","onToggleChange","prevSelected","length","mapListener","on","e","forEachFeatureAtPixel","pixel","feature","castedFeature","unshift","set","splice","push","get"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport ToggleButton from './ToogleButton';\r\nimport TabContent from './TabContent';\r\nimport { Feature, MapBrowserEvent } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(true);\r\n    const [selected, setSelected] = useState(undefined);\r\n    const [toggleValue, setToggleValue] = useState(false);\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature())\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n    function onToggleChange() {\r\n        setToggleValue(!toggleValue)\r\n    }\r\n\r\n    let prevSelected: Feature[] = []\r\n\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature | FeatureLike): void => {\r\n                    let castedFeature: Feature = feature as Feature;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Home'\r\n                    faIcon='fa fa-bars'\r\n                >\r\n                    <TabContent\r\n                        content={<p>This is Home.</p>}\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='database'\r\n                    header='Database'\r\n                    faIcon='fa fa-database'\r\n                />\r\n                <Tab\r\n                    id='locations'\r\n                    header='Set visited locations'\r\n                    faIcon='fa fa-mouse-pointer'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <ToggleButton\r\n                                id='toggleVisited'\r\n                                isOn={toggleValue}\r\n                                isOnColor='rgba(55,156,214,1)'\r\n                                handleToggle={onToggleChange}\r\n                            />\r\n                            {selectedFeature.get('visited')}\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='settings'\r\n                    header='Settings'\r\n                    faIcon='fa fa-cogs'\r\n                    disabled={true}\r\n                    anchor='bottom' />\r\n                <Tab\r\n                    id='off'\r\n                    header='PowerOff'\r\n                    faIcon='fa fa-power-off'\r\n                    anchor='bottom' />\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;"]},"metadata":{},"sourceType":"module"}