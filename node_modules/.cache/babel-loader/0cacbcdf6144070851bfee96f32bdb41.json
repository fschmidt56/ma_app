{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\app\\\\src\\\\components\\\\MapSidebar.tsx\";\nimport React, { useState } from 'react';\nimport 'ol/ol.css';\nimport Sidebar from './Sidebar';\nimport Tab from './Tab';\nimport ToggleButton from './ToogleButton';\nimport TabContent from './TabContent';\nimport { Feature } from 'ol';\nimport { activeToggleColor } from '../utils/MapStyles';\nimport Button from './Button';\nimport { geoserverWfsUrl, wfsTransaction, geoserverHeaders, trackFeature, usedIcons, insertParameters, updateParameters } from '../utils/MapConfig';\nimport { MapUtils } from '../utils/MapUtils';\nimport TwitterFeed from './TwitterFeed';\nimport Legend from './Legend';\nimport { Utils } from '../utils/Utils';\nimport MultiLineString from 'ol/geom/MultiLineString';\nimport Instructions from './Instructions';\nimport Home from './Home';\nconst mapListeners = [];\n\nconst MapSidebar = props => {\n  const {\n    map\n  } = props;\n  const [collapsed, setCollapsed] = useState(false);\n  const [selected, setSelected] = useState('home');\n  const [toggleValue, setToggleValue] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(new Feature());\n  const [transactionResponse, setTransactionResponse] = useState('');\n  const [trackResponse, setTrackResponse] = useState('');\n\n  function onClose() {\n    setCollapsed(true); //@ts-ignore\n\n    setSelected(undefined);\n  }\n\n  function onOpen(id) {\n    setCollapsed(false); //@ts-ignore\n\n    setSelected(id);\n  }\n\n  ;\n\n  function onToggleChange() {\n    setToggleValue(!toggleValue);\n    selectedFeature.set('visited', !toggleValue);\n  }\n\n  const saveData = () => {\n    if (selectedFeature) {\n      if (selectedFeature.getId()) {\n        selectedFeature.unset('selected');\n        selectedFeature.getId();\n        selectedFeature.setGeometryName('geom');\n        selectedFeature.set('visited', toggleValue);\n        let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([], [selectedFeature], [], updateParameters));\n        fetch(geoserverWfsUrl, {\n          method: 'POST',\n          mode: 'no-cors',\n          headers: geoserverHeaders,\n          body: xmlString\n        }).then(response => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`)).then(() => setTimeout(() => setTransactionResponse(''), 3000)).then(() => {\n          //@ts-ignore\n          const layer = map.getLayers().getArray()[1];\n          layer.getSource().clear();\n          layer.getSource().refresh();\n        }).catch(error => console.log(error + 'Feature could not be updated.'));\n      } else {\n        setTransactionResponse('No feature selected.');\n        setTimeout(() => setTransactionResponse(''), 3000);\n        return;\n      }\n    } else {\n      setTransactionResponse('Feature could not be updated.');\n      setTimeout(() => setTransactionResponse(''), 3000);\n      return;\n    }\n  };\n\n  const saveTrack = () => {\n    let linestring = trackFeature.getGeometry();\n\n    if (linestring) {\n      const insertFeature = new Feature({\n        geom: new MultiLineString([linestring])\n      });\n      insertFeature.set('user', 'fabi');\n      let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([insertFeature], [], [], insertParameters));\n      MapUtils.removeLastLayer(map);\n      fetch(geoserverWfsUrl, {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: geoserverHeaders,\n        body: xmlString\n      }).then(response => setTrackResponse(`Track inserted to database with timestamp ${Utils.getDate()}.`)).then(() => {\n        //@ts-ignore\n        const layer = map.getLayers().getArray()[2];\n        layer.getSource().clear();\n        layer.getSource().refresh();\n      }).then(() => setTimeout(() => setTrackResponse(''), 3000)).catch(error => console.log(error + 'Error while saving data.'));\n    } else {\n      setTrackResponse('No Track to save.');\n      setTimeout(() => setTrackResponse(''), 3000);\n      return;\n    }\n  };\n\n  let prevSelected = [];\n\n  if (map) {\n    if (mapListeners.length === 0) {\n      const mapListener = map.on('click', function (e) {\n        map.forEachFeatureAtPixel(e.pixel, feature => {\n          let castedFeature = feature;\n          prevSelected.unshift(castedFeature);\n          setSelectedFeature(prevSelected[0]);\n          prevSelected[0].set('selected', true);\n\n          if (prevSelected.length > 1) {\n            prevSelected[1].set('selected', false);\n          }\n\n          prevSelected.splice(1);\n        });\n      });\n      mapListeners.push(mapListener);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Sidebar, {\n    id: \"sidebar\",\n    collapsed: collapsed,\n    selected: selected,\n    onClose: onClose //@ts-ignore\n    ,\n    doOpen: onOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 147\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    id: \"home\",\n    header: \"Beschreibung\",\n    faIcon: usedIcons[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 155\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Home, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 162\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: `Datenerhebung `,\n      faIcon: usedIcons[1],\n      clickButton: () => setSelected('instructions'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 163\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: `Datenschutz `,\n      faIcon: usedIcons[9],\n      clickButton: () => setSelected('privacy'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 168\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 160\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"instructions\",\n    header: \"Anleitung\",\n    faIcon: usedIcons[1],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 177\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Instructions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 184\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 182\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"locations\",\n    header: \"Besuchte Geb\\xE4ude\",\n    faIcon: usedIcons[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 190\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Legend, {\n      title: \"Legende\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), React.createElement(ToggleButton, {\n      id: \"toggleVisited\",\n      isOn: selectedFeature.get('visited'),\n      isOnColor: activeToggleColor,\n      handleToggle: onToggleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 200\n      },\n      __self: this\n    }), JSON.stringify(selectedFeature.get('visited')), React.createElement(Button, {\n      buttonText: \"Update\",\n      response: transactionResponse,\n      clickButton: saveData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 209\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 195\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"tracking\",\n    header: \"Tracking\",\n    faIcon: usedIcons[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 217\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Button, {\n      buttonText: \"Start tracking\",\n      clickButton: () => MapUtils.createGeolocation(map),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 224\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: \"Quit tracking\",\n      clickButton: saveTrack,\n      response: trackResponse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 228\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"twitter\",\n    header: \"Twitter\",\n    faIcon: usedIcons[4],\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(TwitterFeed, {\n      profileUrl: \"https://twitter.com/rki_de\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 243\n      },\n      __self: this\n    }),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 242\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"privacy\",\n    header: \"Datenschutz\",\n    faIcon: usedIcons[9],\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248\n    },\n    __self: this\n  }), React.createElement(Tab, {\n    id: \"tasks\",\n    header: \"ToDos\",\n    faIcon: \"fa fa-list\",\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 254\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 262\n      },\n      __self: this\n    }, \"turn geolocation off and check if geolocation is already active\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 263\n      },\n      __self: this\n    }, \"statistics user visited locations in bbox, length tracks\")),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 260\n    },\n    __self: this\n  }))));\n};\n\nexport default MapSidebar;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/app/src/components/MapSidebar.tsx"],"names":["React","useState","Sidebar","Tab","ToggleButton","TabContent","Feature","activeToggleColor","Button","geoserverWfsUrl","wfsTransaction","geoserverHeaders","trackFeature","usedIcons","insertParameters","updateParameters","MapUtils","TwitterFeed","Legend","Utils","MultiLineString","Instructions","Home","mapListeners","MapSidebar","props","map","collapsed","setCollapsed","selected","setSelected","toggleValue","setToggleValue","selectedFeature","setSelectedFeature","transactionResponse","setTransactionResponse","trackResponse","setTrackResponse","onClose","undefined","onOpen","id","onToggleChange","set","saveData","getId","unset","setGeometryName","xmlString","XMLSerializer","serializeToString","writeTransaction","fetch","method","mode","headers","body","then","response","setTimeout","layer","getLayers","getArray","getSource","clear","refresh","catch","error","console","log","saveTrack","linestring","getGeometry","insertFeature","geom","removeLastLayer","getDate","prevSelected","length","mapListener","on","e","forEachFeatureAtPixel","pixel","feature","castedFeature","unshift","splice","push","get","JSON","stringify","createGeolocation"],"mappings":"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","sourcesContent":["\r\nimport React, { useState } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps, TSelectableTabs } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport ToggleButton from './ToogleButton';\r\nimport TabContent from './TabContent';\r\nimport { Feature, MapBrowserEvent } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport { activeToggleColor } from '../utils/MapStyles';\r\nimport Button from './Button';\r\nimport { geoserverWfsUrl, wfsTransaction, geoserverHeaders, trackFeature, usedIcons, insertParameters, updateParameters } from '../utils/MapConfig';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport LineString from 'ol/geom/LineString';\r\nimport TwitterFeed from './TwitterFeed';\r\nimport Legend from './Legend';\r\nimport { Utils } from '../utils/Utils';\r\nimport MultiLineString from 'ol/geom/MultiLineString';\r\nimport Instructions from './Instructions';\r\nimport Home from './Home';\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selected, setSelected] = useState<TSelectableTabs>('home');\r\n    const [toggleValue, setToggleValue] = useState(false);\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature());\r\n    const [transactionResponse, setTransactionResponse] = useState('');\r\n    const [trackResponse, setTrackResponse] = useState('');\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n    function onToggleChange() {\r\n        setToggleValue(!toggleValue)\r\n        selectedFeature.set('visited', !toggleValue)\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (selectedFeature) {\r\n            if (selectedFeature.getId()) {\r\n                selectedFeature.unset('selected')\r\n                selectedFeature.getId();\r\n                selectedFeature.setGeometryName('geom');\r\n                selectedFeature.set('visited', toggleValue)\r\n                let xmlString = new XMLSerializer().serializeToString(\r\n                    wfsTransaction.writeTransaction([], [selectedFeature], [], updateParameters)\r\n                )\r\n                fetch(geoserverWfsUrl, {\r\n                    method: 'POST',\r\n                    mode: 'no-cors',\r\n                    headers: geoserverHeaders,\r\n                    body: xmlString\r\n                })\r\n                    .then(response => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`))\r\n                    .then(() => setTimeout(() => setTransactionResponse(''), 3000))\r\n                    .then(() => {\r\n                        //@ts-ignore\r\n                        const layer: VectorLayer = map!.getLayers().getArray()[1];\r\n                        layer.getSource().clear();\r\n                        layer.getSource().refresh();\r\n                    })\r\n                    .catch(error => console.log(error + 'Feature could not be updated.'));\r\n            }\r\n            else {\r\n                setTransactionResponse('No feature selected.')\r\n                setTimeout(() => setTransactionResponse(''), 3000);\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            setTransactionResponse('Feature could not be updated.')\r\n            setTimeout(() => setTransactionResponse(''), 3000);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const saveTrack = () => {\r\n        let linestring = trackFeature.getGeometry() as LineString;\r\n        if (linestring) {\r\n            const insertFeature = new Feature({\r\n                geom: new MultiLineString([linestring])\r\n            });\r\n            insertFeature.set('user', 'fabi')\r\n            let xmlString = new XMLSerializer().serializeToString(\r\n                wfsTransaction.writeTransaction([insertFeature], [], [], insertParameters)\r\n            )\r\n            MapUtils.removeLastLayer(map)\r\n            fetch(geoserverWfsUrl, {\r\n                method: 'POST',\r\n                mode: 'no-cors',\r\n                headers: geoserverHeaders,\r\n                body: xmlString\r\n            })\r\n                .then(response => setTrackResponse(`Track inserted to database with timestamp ${Utils.getDate()}.`))\r\n                .then(() => {\r\n                    //@ts-ignore\r\n                    const layer: VectorLayer = map!.getLayers().getArray()[2];\r\n                    layer.getSource().clear();\r\n                    layer.getSource().refresh();\r\n                })\r\n                .then(() => setTimeout(() => setTrackResponse(''), 3000))\r\n                .catch(error => console.log(error + 'Error while saving data.'));\r\n        }\r\n        else {\r\n            setTrackResponse('No Track to save.');\r\n            setTimeout(() => setTrackResponse(''), 3000);\r\n            return;\r\n        }\r\n    }\r\n\r\n    let prevSelected: Feature[] = []\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature | FeatureLike): void => {\r\n                    let castedFeature: Feature = feature as Feature;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Beschreibung'\r\n                    faIcon={usedIcons[0]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Home />\r\n                            <Button\r\n                                buttonText={`Datenerhebung `}\r\n                                faIcon={usedIcons[1]}\r\n                                clickButton={() => setSelected('instructions')}\r\n                            />\r\n                            <Button\r\n                                buttonText={`Datenschutz `}\r\n                                faIcon={usedIcons[9]}\r\n                                clickButton={() => setSelected('privacy')}\r\n                            />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='instructions'\r\n                    header='Anleitung'\r\n                    faIcon={usedIcons[1]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Instructions />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n\r\n                <Tab\r\n                    id='locations'\r\n                    header='Besuchte Gebäude'\r\n                    faIcon={usedIcons[2]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Legend\r\n                                title='Legende'\r\n                            />\r\n                            <ToggleButton\r\n                                id='toggleVisited'\r\n                                isOn={selectedFeature.get('visited')}\r\n                                isOnColor={activeToggleColor}\r\n                                handleToggle={onToggleChange}\r\n                            />\r\n                            {\r\n                                JSON.stringify(selectedFeature.get('visited'))\r\n                            }\r\n                            <Button\r\n                                buttonText='Update'\r\n                                response={transactionResponse}\r\n                                clickButton={saveData}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='tracking'\r\n                    header='Tracking'\r\n                    faIcon={usedIcons[3]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Button\r\n                                buttonText='Start tracking'\r\n                                clickButton={() => MapUtils.createGeolocation(map)}\r\n                            />\r\n                            <Button\r\n                                buttonText='Quit tracking'\r\n                                clickButton={saveTrack}\r\n                                response={trackResponse}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='twitter'\r\n                    header='Twitter'\r\n                    faIcon={usedIcons[4]}\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <TwitterFeed\r\n                            profileUrl='https://twitter.com/rki_de'\r\n                        />\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='privacy'\r\n                    header='Datenschutz'\r\n                    faIcon={usedIcons[9]}\r\n                    anchor='bottom'\r\n                />\r\n                <Tab\r\n                    id='tasks'\r\n                    header='ToDos'\r\n                    faIcon='fa fa-list'\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <li>turn geolocation off and check if geolocation is already active</li>\r\n                            <li>statistics user visited locations in bbox, length tracks</li>\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;"]},"metadata":{},"sourceType":"module"}