{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Fabi\\\\Desktop\\\\Uni\\\\Master\\\\4. Semester\\\\MA\\\\WebGIS\\\\app\\\\src\\\\components\\\\MapSidebar.tsx\";\nimport React, { useState, useEffect } from 'react';\nimport 'ol/ol.css';\nimport Sidebar from './Sidebar';\nimport Tab from './Tab';\nimport ToggleButton from './ToogleButton';\nimport TabContent from './TabContent';\nimport { Feature } from 'ol';\nimport { activeToggleColor } from '../utils/MapStyles';\nimport Button from './Button';\nimport { geoserverWfsUrl, wfsTransaction, geoserverHeaders, trackFeature, usedIcons, insertParameters, updateParameters } from '../utils/MapConfig';\nimport { MapUtils } from '../utils/MapUtils';\nimport Legend from './Legend';\nimport { Utils } from '../utils/Utils';\nimport MultiLineString from 'ol/geom/MultiLineString';\nimport Instructions from './Instructions';\nimport Home from './Home';\nconst mapListeners = [];\n\nconst MapSidebar = props => {\n  const {\n    map\n  } = props;\n  const [collapsed, setCollapsed] = useState(false);\n  const [selected, setSelected] = useState('home');\n  const [toggleValue, setToggleValue] = useState(false);\n  const [selectedFeature, setSelectedFeature] = useState(new Feature());\n  const [transactionResponse, setTransactionResponse] = useState('');\n  const [trackResponse, setTrackResponse] = useState('');\n  const [token, setToken] = useState(localStorage.getItem('VgiUserToken'));\n\n  function hashUser() {\n    fetch('http://192.168.2.185:8000/hash').then(response => response.json()).then(value => localStorage.setItem('VgiUserToken', value));\n  }\n\n  useEffect(() => {\n    if (localStorage.getItem('VgiUserToken') === null) {\n      hashUser();\n    } else {\n      return;\n    }\n  }, []);\n\n  function onClose() {\n    setCollapsed(true); //@ts-ignore\n\n    setSelected(undefined);\n  }\n\n  function onOpen(id) {\n    setCollapsed(false); //@ts-ignore\n\n    setSelected(id);\n  }\n\n  ;\n\n  function onToggleChange() {\n    setToggleValue(!toggleValue);\n    selectedFeature.set('visited', !toggleValue);\n  }\n\n  const saveData = () => {\n    if (selectedFeature) {\n      if (selectedFeature.getId()) {\n        selectedFeature.unset('selected');\n        selectedFeature.getId();\n        selectedFeature.setGeometryName('geom');\n        selectedFeature.set('visited', toggleValue);\n        selectedFeature.set('edited_by', token);\n        let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([], [selectedFeature], [], updateParameters));\n        console.log(xmlString);\n        fetch('http://192.168.2.185:8000/handleGeoserver', {\n          method: 'POST',\n          mode: 'cors',\n          headers: geoserverHeaders,\n          body: JSON.stringify(xmlString)\n        }).then(response => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`)).then(() => setTimeout(() => setTransactionResponse(''), 3000)).then(() => {\n          //@ts-ignore\n          const layer = map.getLayers().getArray()[1];\n          layer.getSource().clear();\n          layer.getSource().refresh();\n        }).catch(error => console.log(error + 'Feature could not be updated.'));\n      } else {\n        setTransactionResponse('No feature selected.');\n        setTimeout(() => setTransactionResponse(''), 3000);\n        return;\n      }\n    } else {\n      setTransactionResponse('Feature could not be updated.');\n      setTimeout(() => setTransactionResponse(''), 3000);\n      return;\n    }\n  };\n\n  const saveTrack = () => {\n    let linestring = trackFeature.getGeometry();\n\n    if (linestring) {\n      const insertFeature = new Feature({\n        geom: new MultiLineString([linestring])\n      });\n      insertFeature.set('user', 'fabi');\n      let xmlString = new XMLSerializer().serializeToString(wfsTransaction.writeTransaction([insertFeature], [], [], insertParameters));\n      MapUtils.removeLastLayer(map);\n      fetch(geoserverWfsUrl, {\n        method: 'POST',\n        mode: 'no-cors',\n        headers: geoserverHeaders,\n        body: xmlString\n      }).then(response => setTrackResponse(`Track inserted to database with timestamp ${Utils.getDate()}.`)).then(() => {\n        //@ts-ignore\n        const layer = map.getLayers().getArray()[2];\n        layer.getSource().clear();\n        layer.getSource().refresh();\n      }).then(() => setTimeout(() => setTrackResponse(''), 3000)).catch(error => console.log(error + 'Error while saving data.'));\n    } else {\n      setTrackResponse('No Track to save.');\n      setTimeout(() => setTrackResponse(''), 3000);\n      return;\n    }\n  };\n\n  let prevSelected = [];\n\n  if (map) {\n    if (mapListeners.length === 0) {\n      const mapListener = map.on('click', function (e) {\n        map.forEachFeatureAtPixel(e.pixel, feature => {\n          let castedFeature = feature;\n          prevSelected.unshift(castedFeature);\n          setSelectedFeature(prevSelected[0]);\n          prevSelected[0].set('selected', true);\n\n          if (prevSelected.length > 1) {\n            prevSelected[1].set('selected', false);\n          }\n\n          prevSelected.splice(1);\n        });\n      });\n      mapListeners.push(mapListener);\n    }\n  }\n\n  return React.createElement(React.Fragment, null, React.createElement(Sidebar, {\n    id: \"sidebar\",\n    collapsed: collapsed,\n    selected: selected,\n    onClose: onClose //@ts-ignore\n    ,\n    doOpen: onOpen,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 162\n    },\n    __self: this\n  }, React.createElement(Tab, {\n    id: \"home\",\n    header: \"Beschreibung\",\n    faIcon: usedIcons[0],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 170\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Home, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 177\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: `Informationen `,\n      faIcon: usedIcons[1],\n      clickButton: () => setSelected('instructions'),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 178\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 175\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"locations\",\n    header: \"Besuchte Geb\\xE4ude\",\n    faIcon: usedIcons[2],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 187\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Legend, {\n      title: \"Legende\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 194\n      },\n      __self: this\n    }), React.createElement(ToggleButton, {\n      id: \"toggleVisited\",\n      isOn: selectedFeature.get('visited'),\n      isOnColor: activeToggleColor,\n      handleToggle: onToggleChange,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 197\n      },\n      __self: this\n    }), JSON.stringify(selectedFeature.get('visited')), React.createElement(Button, {\n      buttonText: \"Update\",\n      response: transactionResponse,\n      clickButton: saveData,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 206\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"instructions\",\n    header: \"Informationen\",\n    faIcon: usedIcons[1],\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 214\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Instructions, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 222\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"tracking\",\n    header: \"Tracking\",\n    faIcon: usedIcons[3],\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(Button, {\n      buttonText: \"Start tracking\",\n      clickButton: () => MapUtils.createGeolocation(map),\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 234\n      },\n      __self: this\n    }), React.createElement(Button, {\n      buttonText: \"Quit tracking\",\n      clickButton: saveTrack,\n      response: trackResponse,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 238\n      },\n      __self: this\n    })),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 232\n    },\n    __self: this\n  })), React.createElement(Tab, {\n    id: \"user-infos\",\n    header: \"Nutzerinformationen\",\n    faIcon: \"fa fa-user\",\n    anchor: \"bottom\",\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 246\n    },\n    __self: this\n  }, React.createElement(TabContent, {\n    content: React.createElement(React.Fragment, null, React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 254\n      },\n      __self: this\n    }, \"Nutzer Token entfernen lassen, selbst generieren?\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 255\n      },\n      __self: this\n    }, \"auf API hinweisen?\"), React.createElement(\"li\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 256\n      },\n      __self: this\n    }, localStorage.getItem('VgiUserToken'))),\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252\n    },\n    __self: this\n  }))));\n};\n\nexport default MapSidebar;","map":{"version":3,"sources":["C:/Users/Fabi/Desktop/Uni/Master/4. Semester/MA/WebGIS/app/src/components/MapSidebar.tsx"],"names":["React","useState","useEffect","Sidebar","Tab","ToggleButton","TabContent","Feature","activeToggleColor","Button","geoserverWfsUrl","wfsTransaction","geoserverHeaders","trackFeature","usedIcons","insertParameters","updateParameters","MapUtils","Legend","Utils","MultiLineString","Instructions","Home","mapListeners","MapSidebar","props","map","collapsed","setCollapsed","selected","setSelected","toggleValue","setToggleValue","selectedFeature","setSelectedFeature","transactionResponse","setTransactionResponse","trackResponse","setTrackResponse","token","setToken","localStorage","getItem","hashUser","fetch","then","response","json","value","setItem","onClose","undefined","onOpen","id","onToggleChange","set","saveData","getId","unset","setGeometryName","xmlString","XMLSerializer","serializeToString","writeTransaction","console","log","method","mode","headers","body","JSON","stringify","setTimeout","layer","getLayers","getArray","getSource","clear","refresh","catch","error","saveTrack","linestring","getGeometry","insertFeature","geom","removeLastLayer","getDate","prevSelected","length","mapListener","on","e","forEachFeatureAtPixel","pixel","feature","castedFeature","unshift","splice","push","get","createGeolocation"],"mappings":"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","sourcesContent":["\r\nimport React, { useState, useEffect } from 'react';\r\nimport 'ol/ol.css';\r\nimport { IMapSidebarProps, TSelectableTabs } from '../types/types';\r\nimport Sidebar from './Sidebar';\r\nimport Tab from './Tab';\r\nimport ToggleButton from './ToogleButton';\r\nimport TabContent from './TabContent';\r\nimport { Feature, MapBrowserEvent } from 'ol';\r\nimport { FeatureLike } from 'ol/Feature';\r\nimport { activeToggleColor } from '../utils/MapStyles';\r\nimport Button from './Button';\r\nimport { geoserverWfsUrl, wfsTransaction, geoserverHeaders, trackFeature, usedIcons, insertParameters, updateParameters } from '../utils/MapConfig';\r\nimport VectorLayer from 'ol/layer/Vector';\r\nimport { MapUtils } from '../utils/MapUtils';\r\nimport LineString from 'ol/geom/LineString';\r\nimport Legend from './Legend';\r\nimport { Utils } from '../utils/Utils';\r\nimport MultiLineString from 'ol/geom/MultiLineString';\r\nimport Instructions from './Instructions';\r\nimport Home from './Home';\r\n\r\nconst mapListeners = [];\r\n\r\nconst MapSidebar = (props: IMapSidebarProps): JSX.Element => {\r\n\r\n    const { map } = props;\r\n\r\n    const [collapsed, setCollapsed] = useState(false);\r\n    const [selected, setSelected] = useState<TSelectableTabs>('home');\r\n    const [toggleValue, setToggleValue] = useState(false);\r\n    const [selectedFeature, setSelectedFeature] = useState(new Feature());\r\n    const [transactionResponse, setTransactionResponse] = useState('');\r\n    const [trackResponse, setTrackResponse] = useState('');\r\n    const [token, setToken] = useState(localStorage.getItem('VgiUserToken'));\r\n\r\n    function hashUser() {\r\n        fetch('http://192.168.2.185:8000/hash')\r\n            .then(response => response.json())\r\n            .then(value => localStorage.setItem('VgiUserToken', value))\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (localStorage.getItem('VgiUserToken') === null) {\r\n            hashUser()\r\n        }\r\n        else { return }\r\n    }, [])\r\n\r\n    function onClose() {\r\n        setCollapsed(true);\r\n        //@ts-ignore\r\n        setSelected(undefined);\r\n    }\r\n    function onOpen(id: string) {\r\n        setCollapsed(false)\r\n        //@ts-ignore\r\n        setSelected(id)\r\n    };\r\n\r\n    function onToggleChange() {\r\n        setToggleValue(!toggleValue)\r\n        selectedFeature.set('visited', !toggleValue)\r\n    }\r\n\r\n    const saveData = () => {\r\n        if (selectedFeature) {\r\n            if (selectedFeature.getId()) {\r\n                selectedFeature.unset('selected')\r\n                selectedFeature.getId();\r\n                selectedFeature.setGeometryName('geom');\r\n                selectedFeature.set('visited', toggleValue);\r\n                selectedFeature.set('edited_by', token);\r\n                let xmlString = new XMLSerializer().serializeToString(\r\n                    wfsTransaction.writeTransaction([], [selectedFeature], [], updateParameters)\r\n                )\r\n                console.log(xmlString)\r\n                fetch('http://192.168.2.185:8000/handleGeoserver', {\r\n                    method: 'POST',\r\n                    mode: 'cors',\r\n                    headers: geoserverHeaders,\r\n                    body: JSON.stringify(xmlString)\r\n                })\r\n                    .then(response => setTransactionResponse(`Updated Location with id ${selectedFeature.getId()} successfully.`))\r\n                    .then(() => setTimeout(() => setTransactionResponse(''), 3000))\r\n                    .then(() => {\r\n                        //@ts-ignore\r\n                        const layer: VectorLayer = map!.getLayers().getArray()[1];\r\n                        layer.getSource().clear();\r\n                        layer.getSource().refresh();\r\n                    })\r\n                    .catch(error => console.log(error + 'Feature could not be updated.'));\r\n            }\r\n            else {\r\n                setTransactionResponse('No feature selected.')\r\n                setTimeout(() => setTransactionResponse(''), 3000);\r\n                return;\r\n            }\r\n        }\r\n        else {\r\n            setTransactionResponse('Feature could not be updated.')\r\n            setTimeout(() => setTransactionResponse(''), 3000);\r\n            return;\r\n        }\r\n    }\r\n\r\n    const saveTrack = () => {\r\n        let linestring = trackFeature.getGeometry() as LineString;\r\n        if (linestring) {\r\n            const insertFeature = new Feature({\r\n                geom: new MultiLineString([linestring])\r\n            });\r\n            insertFeature.set('user', 'fabi')\r\n            let xmlString = new XMLSerializer().serializeToString(\r\n                wfsTransaction.writeTransaction([insertFeature], [], [], insertParameters)\r\n            )\r\n            MapUtils.removeLastLayer(map)\r\n            fetch(geoserverWfsUrl, {\r\n                method: 'POST',\r\n                mode: 'no-cors',\r\n                headers: geoserverHeaders,\r\n                body: xmlString\r\n            })\r\n                .then(response => setTrackResponse(`Track inserted to database with timestamp ${Utils.getDate()}.`))\r\n                .then(() => {\r\n                    //@ts-ignore\r\n                    const layer: VectorLayer = map!.getLayers().getArray()[2];\r\n                    layer.getSource().clear();\r\n                    layer.getSource().refresh();\r\n                })\r\n                .then(() => setTimeout(() => setTrackResponse(''), 3000))\r\n                .catch(error => console.log(error + 'Error while saving data.'));\r\n        }\r\n        else {\r\n            setTrackResponse('No Track to save.');\r\n            setTimeout(() => setTrackResponse(''), 3000);\r\n            return;\r\n        }\r\n    }\r\n\r\n    let prevSelected: Feature[] = []\r\n    if (map) {\r\n        if (mapListeners.length === 0) {\r\n            const mapListener = map.on('click', function (e: MapBrowserEvent): void {\r\n                map!.forEachFeatureAtPixel(e.pixel, (feature: Feature | FeatureLike): void => {\r\n                    let castedFeature: Feature = feature as Feature;\r\n                    prevSelected.unshift(castedFeature)\r\n                    setSelectedFeature(prevSelected[0]);\r\n                    prevSelected[0].set('selected', true);\r\n                    if (prevSelected.length > 1) {\r\n                        prevSelected[1].set('selected', false);\r\n                    }\r\n                    prevSelected.splice(1)\r\n                });\r\n            });\r\n            mapListeners.push(mapListener);\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Sidebar\r\n                id='sidebar'\r\n                collapsed={collapsed}\r\n                selected={selected}\r\n                onClose={onClose}\r\n                //@ts-ignore\r\n                doOpen={onOpen}\r\n            >\r\n                <Tab\r\n                    id='home'\r\n                    header='Beschreibung'\r\n                    faIcon={usedIcons[0]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Home />\r\n                            <Button\r\n                                buttonText={`Informationen `}\r\n                                faIcon={usedIcons[1]}\r\n                                clickButton={() => setSelected('instructions')}\r\n                            />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='locations'\r\n                    header='Besuchte Gebäude'\r\n                    faIcon={usedIcons[2]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Legend\r\n                                title='Legende'\r\n                            />\r\n                            <ToggleButton\r\n                                id='toggleVisited'\r\n                                isOn={selectedFeature.get('visited')}\r\n                                isOnColor={activeToggleColor}\r\n                                handleToggle={onToggleChange}\r\n                            />\r\n                            {\r\n                                JSON.stringify(selectedFeature.get('visited'))\r\n                            }\r\n                            <Button\r\n                                buttonText='Update'\r\n                                response={transactionResponse}\r\n                                clickButton={saveData}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='instructions'\r\n                    header='Informationen'\r\n                    faIcon={usedIcons[1]}\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Instructions />\r\n                        </>\r\n                    }\r\n                    />\r\n                </Tab>\r\n                <Tab\r\n                    id='tracking'\r\n                    header='Tracking'\r\n                    faIcon={usedIcons[3]}\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <Button\r\n                                buttonText='Start tracking'\r\n                                clickButton={() => MapUtils.createGeolocation(map)}\r\n                            />\r\n                            <Button\r\n                                buttonText='Quit tracking'\r\n                                clickButton={saveTrack}\r\n                                response={trackResponse}\r\n                            />\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n                <Tab\r\n                    id='user-infos'\r\n                    header='Nutzerinformationen'\r\n                    faIcon='fa fa-user'\r\n                    anchor='bottom'\r\n                >\r\n                    <TabContent content={\r\n                        <>\r\n                            <li>Nutzer Token entfernen lassen, selbst generieren?</li>\r\n                            <li>auf API hinweisen?</li>\r\n                            <li>{localStorage.getItem('VgiUserToken')}</li>\r\n                        </>\r\n                    } />\r\n                </Tab>\r\n            </Sidebar>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MapSidebar;"]},"metadata":{},"sourceType":"module"}